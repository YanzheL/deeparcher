apiVersion: kafka.strimzi.io/v1beta1
kind: Kafka
metadata:
  name: kafka
spec:
  clusterCa:
    generateCertificateAuthority: false
  clientsCa:
    generateCertificateAuthority: false
  kafka:
    image: hitnslab/kafka:0.18.0-kafka-2.5.0-graalvm
    tlsSidecar:
      image: hitnslab/kafka:0.18.0-kafka-2.5.0-graalvm
    version: "2.5.0"
    replicas: 5
    authorization:
      type: simple
      superUsers:
        - CN=admin,OU=kubernetes:kafka
    listeners:
      plain:
        authentication:
          type: scram-sha-512
      tls:
        authentication:
          type: tls
      #   configuration:
      #     brokerCertChainAndKey:
      #       certificate:
      #       key:
      #       secretName:
      external:
        type: ingress
        authentication:
          type: tls
        configuration:
          bootstrap:
            address: kafka.hitnslab.com
            # dnsAnnotations:
            #   nginx.ingress.kubernetes.io/ssl-redirect: 'true'
            #   nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
            host: kafka.hitnslab.com
          brokers:
            - broker: 0
              host: kafka-0.hitnslab.com
            - broker: 1
              host: kafka-1.hitnslab.com
            - broker: 2
              host: kafka-2.hitnslab.com
            - broker: 3
              host: kafka-3.hitnslab.com
            - broker: 4
              host: kafka-4.hitnslab.com
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      message.max.bytes: 33554432 #32Mi
      replica.fetch.max.bytes: 33554432
      ssl.protocol: TLSv1.2
      #      ssl.enabled.protocols: TLSv1.3,TLSv1.2
      metric.reporters: io.confluent.metrics.reporter.ConfluentMetricsReporter
      confluent.metrics.reporter.publish.ms: 15000
      confluent.metrics.reporter.bootstrap.servers: kafka-kafka-bootstrap:9093
      confluent.metrics.reporter.security.protocol: SSL
      confluent.metrics.reporter.ssl.truststore.type: PKCS12
      confluent.metrics.reporter.ssl.truststore.location: /tmp/kafka/cluster.truststore.p12
      confluent.metrics.reporter.ssl.truststore.password: ${CERTS_STORE_PASSWORD}
      confluent.metrics.reporter.ssl.keystore.type: PKCS12
      confluent.metrics.reporter.ssl.keystore.location: /tmp/kafka/cluster.keystore.p12
      confluent.metrics.reporter.ssl.keystore.password: ${CERTS_STORE_PASSWORD}
      confluent.metrics.reporter.ssl.key.password: ${CERTS_STORE_PASSWORD}
      # ssl.endpoint.identification.algorithm: ""
    storage:
      type: persistent-claim
      class: local
      size: 100Gi
      # type: ephemeral
      # sizeLimit: 200Gi
      # deleteClaim: true
    jvmOptions:
      -Xms: 2g
      -Xmx: 5g
      -XX:
        UnlockExperimentalVMOptions: true
        EagerJVMCI: true
      javaSystemProperties:
        - name: java.security.properties
          value: /opt/kafka/config/amazon-corretto-crypto-provider.security
    resources:
      requests:
        cpu: 1
        memory: 2Gi
      limits:
        cpu: 8
        memory: 8Gi
    rack:
      topologyKey: failure-domain.beta.kubernetes.io/zone
    jmxOptions:
      authentication:
        type: password
    readinessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 20
      periodSeconds: 20
      successThreshold: 1
      failureThreshold: 20
    livenessProbe:
      initialDelaySeconds: 60
      timeoutSeconds: 20
      periodSeconds: 20
      successThreshold: 1
      failureThreshold: 20
    template:
      pod:
        securityContext:
          fsGroup: 1001
          runAsUser: 1001
          runAsGroup: 1001
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: strimzi.io/name
                      operator: In
                      values:
                        - kafka-kafka
  zookeeper:
    replicas: 1
    image: hitnslab/kafka:0.18.0-kafka-2.5.0-graalvm
    config:
      ssl.protocol: TLSv1.2
      ssl.enabled.protocols: TLSv1.3,TLSv1.2
    jvmOptions:
      -Xms: 2g
      -Xmx: 5g
      -XX:
        UnlockExperimentalVMOptions: true
        EagerJVMCI: true
      javaSystemProperties:
        - name: java.security.properties
          value: /opt/kafka/config/amazon-corretto-crypto-provider.security
    resources:
      requests:
        cpu: 1
        memory: 2Gi
      limits:
        cpu: 8
        memory: 8Gi
    readinessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 20
      periodSeconds: 20
      successThreshold: 1
      failureThreshold: 20
    livenessProbe:
      initialDelaySeconds: 60
      timeoutSeconds: 20
      periodSeconds: 20
      successThreshold: 1
      failureThreshold: 20
    storage:
      # type: ephemeral
      # sizeLimit: 100Gi
      type: persistent-claim
      size: 50Gi
      class: nfs-client
      # deleteClaim: true
    template:
      pod:
        # schedulerName: stork
        securityContext:
          fsGroup: 1001
          runAsUser: 1001
          runAsGroup: 1001
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: strimzi.io/name
                      operator: In
                      values:
                        - kafka-zookeeper
          # nodeAffinity:
          #   preferredDuringSchedulingIgnoredDuringExecution:
          #     - weight: 10
          #       preference:
          #         matchExpressions:
          #           - key: failure-domain.beta.kubernetes.io/region
          #             operator: In
          #             values:
          #               - ns-2
          #   requiredDuringSchedulingIgnoredDuringExecution:
          #     nodeSelectorTerms:
          #       - matchExpressions:
          #         - key: px/enabled
          #           operator: In
          #           values:
          #           - 'true'
  entityOperator:
    tlsSidecar:
      image: hitnslab/kafka:0.18.0-kafka-2.5.0-graalvm
    topicOperator:
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 512Mi
          cpu: 2
    userOperator:
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 512Mi
          cpu: 2
  # cruiseControl:
  #   capacity:
  #     networkIn: 200MB/s
  #     networkOut: 200MB/s
  #   config:
  #     default.goals: >
  #       com.linkedin.kafka.cruisecontrol.analyzer.goals.RackAwareGoal,
  #       com.linkedin.kafka.cruisecontrol.analyzer.goals.ReplicaCapacityGoal,
  #       com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskCapacityGoal
  #     # goals: {}
  #     cpu.balance.threshold: 1.1
  #     metadata.max.age.ms: 300000
  #     send.buffer.bytes: 1048576
  #     # ...
  #   resources:
  #     requests:
  #       cpu: 200m
  #       memory: 64Mi
  #     limits:
  #       cpu: "1"
  #       memory: 256Mi
  #   logging:
  #     type: inline
  #     loggers:
  #       cruisecontrol.root.logger: INFO
  #   template:
  #     pod:
  #       securityContext:
  #         fsGroup: 1001
  #         runAsUser: 1001
  #         runAsGroup: 1001
  #       terminationGracePeriodSeconds: 120
  #       affinity:
  #         nodeAffinity:
  #           preferredDuringSchedulingIgnoredDuringExecution:
  #             - weight: 10
  #               preference:
  #                 matchExpressions:
  #                   - key: failure-domain.beta.kubernetes.io/region
  #                     operator: In
  #                     values:
  #                       - ns-2
  #   readinessProbe:
  #     initialDelaySeconds: 30
  #     timeoutSeconds: 15
  #   livenessProbe:
  #     initialDelaySeconds: 30
  #     timeoutSeconds: 15
