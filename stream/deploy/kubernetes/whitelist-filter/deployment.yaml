apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: stream-whitelist-filter
    app.kubernetes.io/part-of: deeparcher
    app.kubernetes.io/component: stream
  name: stream-whitelist-filter
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: stream-whitelist-filter
      app.kubernetes.io/part-of: deeparcher
      app.kubernetes.io/component: stream
  template:
    metadata:
      labels:
        app.kubernetes.io/name: stream-whitelist-filter
        app.kubernetes.io/part-of: deeparcher
        app.kubernetes.io/component: stream
    spec:
      nodeSelector:
        kubernetes.io/hostname: k8s-gpu-node0
      enableServiceLinks: false
      affinity:
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            - topologyKey: kubernetes.io/hostname
#              labelSelector:
#                matchExpressions:
#                  - key: app.kubernetes.io/component
#                    operator: In
#                    values:
#                      - stream
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              preference:
                matchExpressions:
                  - key: failure-domain.beta.kubernetes.io/region
                    operator: In
                    values:
                      - ns-2
      imagePullSecrets:
        - name: default-registry-key
      containers:
        - name: stream
          image: registry.gitlab.com/yanzhel/deeparcher/stream:dev
          # image: registry.hitnslab.com/dns-security/malicious-domain-rating/deeparcher/stream:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 9999
              protocol: TCP
              name: jmx
          env:
            - name: JAVA_TOOL_OPTIONS
              value: -Xms500m -Xmx4g -Xlog:gc*:/tmp/gc.log -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka-kafka-bootstrap:9093
            - name: SPRING_KAFKA_SSL_KEY_STORE_TYPE
              value: PKCS12
            - name: SPRING_KAFKA_SSL_KEY_STORE_LOCATION
              value: file:///var/run/secrets/java.io/keystores/user.p12
            - name: SPRING_KAFKA_SSL_KEY_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-user-whitelist-filter
                  key: user.password
            - name: SPRING_KAFKA_SSL_TRUST_STORE_TYPE
              value: JKS
            - name: SPRING_KAFKA_SSL_TRUST_STORE_LOCATION
              value: file:///var/run/secrets/java.io/truststores/ca.jks
            - name: SPRING_KAFKA_SSL_TRUST_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: truststore
                  key: password
            - name: SPRING_KAFKA_STREAMS_APPLICATION_ID
              value: stream-whitelist-filter
            - name: APP_WHITELIST_FILTER_ENABLED
              value: 'true'
          resources:
            requests:
              cpu: 100m
              memory: 500Mi
            limits:
#              cpu: 4
              memory: 4.5Gi
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /var/run/secrets/java.io/keystores/
              name: keystores
            - mountPath: /var/run/secrets/java.io/truststores/
              name: truststores
      restartPolicy: Always
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      volumes:
        - name: keystores
          secret:
            secretName: kafka-user-whitelist-filter
            defaultMode: 256
        - name: truststores
          secret:
            secretName: truststore
            defaultMode: 256
        - name: data
          persistentVolumeClaim:
            claimName: stream-whitelist-filter
