// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/hitnslab/dnssecurity/deeparcher/api/proto/graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com/hitnslab/dnssecurity/deeparcher/api/proto/matrix.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto;
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {
class ComponentAttr;
class ComponentAttrDefaultTypeInternal;
extern ComponentAttrDefaultTypeInternal _ComponentAttr_default_instance_;
class Graph;
class GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::ComponentAttr* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::ComponentAttr>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {

// ===================================================================

class Graph :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph) */ {
 public:
  Graph();
  virtual ~Graph();

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Graph& default_instance();

  enum AdjCase {
    kDense = 10,
    kCoo = 11,
    kCsr = 12,
    kCsc = 13,
    ADJ_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Graph* New() const final {
    return CreateMaybeMessage<Graph>(nullptr);
  }

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdRemapFieldNumber = 19,
    kAttributesFieldNumber = 32,
    kIdFieldNumber = 1,
    kNodesFieldNumber = 2,
    kEdgesFieldNumber = 3,
    kDirectedFieldNumber = 16,
    kConnectedFieldNumber = 17,
    kUnweightedFieldNumber = 18,
    kDenseFieldNumber = 10,
    kCooFieldNumber = 11,
    kCsrFieldNumber = 12,
    kCscFieldNumber = 13,
  };
  // repeated uint64 node_id_remap = 19;
  int node_id_remap_size() const;
  private:
  int _internal_node_id_remap_size() const;
  public:
  void clear_node_id_remap();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_node_id_remap(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_node_id_remap() const;
  void _internal_add_node_id_remap(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_node_id_remap();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id_remap(int index) const;
  void set_node_id_remap(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_node_id_remap(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      node_id_remap() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_node_id_remap();

  // repeated .google.protobuf.Any attributes = 32;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  PROTOBUF_NAMESPACE_ID::Any* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_attributes();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_attributes(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_attributes();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& attributes(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      attributes() const;

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 nodes = 2;
  void clear_nodes();
  ::PROTOBUF_NAMESPACE_ID::int64 nodes() const;
  void set_nodes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_nodes() const;
  void _internal_set_nodes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 edges = 3;
  void clear_edges();
  ::PROTOBUF_NAMESPACE_ID::int64 edges() const;
  void set_edges(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_edges() const;
  void _internal_set_edges(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool directed = 16;
  void clear_directed();
  bool directed() const;
  void set_directed(bool value);
  private:
  bool _internal_directed() const;
  void _internal_set_directed(bool value);
  public:

  // bool connected = 17;
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // bool unweighted = 18;
  void clear_unweighted();
  bool unweighted() const;
  void set_unweighted(bool value);
  private:
  bool _internal_unweighted() const;
  void _internal_set_unweighted(bool value);
  public:

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat dense = 10;
  bool has_dense() const;
  private:
  bool _internal_has_dense() const;
  public:
  void clear_dense();
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat& dense() const;
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* release_dense();
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* mutable_dense();
  void set_allocated_dense(::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* dense);
  private:
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat& _internal_dense() const;
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* _internal_mutable_dense();
  public:
  void unsafe_arena_set_allocated_dense(
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* dense);
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* unsafe_arena_release_dense();

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat coo = 11;
  bool has_coo() const;
  private:
  bool _internal_has_coo() const;
  public:
  void clear_coo();
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat& coo() const;
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* release_coo();
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* mutable_coo();
  void set_allocated_coo(::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* coo);
  private:
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat& _internal_coo() const;
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* _internal_mutable_coo();
  public:
  void unsafe_arena_set_allocated_coo(
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* coo);
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* unsafe_arena_release_coo();

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat csr = 12;
  bool has_csr() const;
  private:
  bool _internal_has_csr() const;
  public:
  void clear_csr();
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat& csr() const;
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* release_csr();
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* mutable_csr();
  void set_allocated_csr(::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* csr);
  private:
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat& _internal_csr() const;
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* _internal_mutable_csr();
  public:
  void unsafe_arena_set_allocated_csr(
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* csr);
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* unsafe_arena_release_csr();

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat csc = 13;
  bool has_csc() const;
  private:
  bool _internal_has_csc() const;
  public:
  void clear_csc();
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat& csc() const;
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* release_csc();
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* mutable_csc();
  void set_allocated_csc(::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* csc);
  private:
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat& _internal_csc() const;
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* _internal_mutable_csc();
  public:
  void unsafe_arena_set_allocated_csc(
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* csc);
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* unsafe_arena_release_csc();

  void clear_adj();
  AdjCase adj_case() const;
  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
 private:
  class _Internal;
  void set_has_dense();
  void set_has_coo();
  void set_has_csr();
  void set_has_csc();

  inline bool has_adj() const;
  inline void clear_has_adj();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > node_id_remap_;
  mutable std::atomic<int> _node_id_remap_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > attributes_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 nodes_;
  ::PROTOBUF_NAMESPACE_ID::int64 edges_;
  bool directed_;
  bool connected_;
  bool unweighted_;
  union AdjUnion {
    AdjUnion() {}
    ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* dense_;
    ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* coo_;
    ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* csr_;
    ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* csc_;
  } adj_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto;
};
// -------------------------------------------------------------------

class ComponentAttr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr) */ {
 public:
  ComponentAttr();
  virtual ~ComponentAttr();

  ComponentAttr(const ComponentAttr& from);
  ComponentAttr(ComponentAttr&& from) noexcept
    : ComponentAttr() {
    *this = ::std::move(from);
  }

  inline ComponentAttr& operator=(const ComponentAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentAttr& operator=(ComponentAttr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentAttr* internal_default_instance() {
    return reinterpret_cast<const ComponentAttr*>(
               &_ComponentAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComponentAttr& a, ComponentAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentAttr* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentAttr* New() const final {
    return CreateMaybeMessage<ComponentAttr>(nullptr);
  }

  ComponentAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentAttr& from);
  void MergeFrom(const ComponentAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr";
  }
  protected:
  explicit ComponentAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 3,
    kParentIdFieldNumber = 1,
    kComponentIdFieldNumber = 2,
  };
  // repeated uint64 components = 3;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_components(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_components() const;
  void _internal_add_components(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_components();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 components(int index) const;
  void set_components(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_components(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      components() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_components();

  // uint64 parent_id = 1;
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_parent_id() const;
  void _internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 component_id = 2;
  void clear_component_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 component_id() const;
  void set_component_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_component_id() const;
  void _internal_set_component_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > components_;
  mutable std::atomic<int> _components_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 parent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 component_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Graph

// int64 id = 1;
inline void Graph::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Graph::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Graph::id() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.id)
  return _internal_id();
}
inline void Graph::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Graph::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.id)
}

// int64 nodes = 2;
inline void Graph::clear_nodes() {
  nodes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Graph::_internal_nodes() const {
  return nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Graph::nodes() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.nodes)
  return _internal_nodes();
}
inline void Graph::_internal_set_nodes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nodes_ = value;
}
inline void Graph::set_nodes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_nodes(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.nodes)
}

// int64 edges = 3;
inline void Graph::clear_edges() {
  edges_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Graph::_internal_edges() const {
  return edges_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Graph::edges() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.edges)
  return _internal_edges();
}
inline void Graph::_internal_set_edges(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  edges_ = value;
}
inline void Graph::set_edges(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_edges(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.edges)
}

// .com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat dense = 10;
inline bool Graph::_internal_has_dense() const {
  return adj_case() == kDense;
}
inline bool Graph::has_dense() const {
  return _internal_has_dense();
}
inline void Graph::set_has_dense() {
  _oneof_case_[0] = kDense;
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* Graph::release_dense() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.dense)
  if (_internal_has_dense()) {
    clear_has_adj();
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* temp = adj_.dense_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    adj_.dense_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat& Graph::_internal_dense() const {
  return _internal_has_dense()
      ? *adj_.dense_
      : *reinterpret_cast< ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat*>(&::com::hitnslab::dnssecurity::deeparcher::api::proto::_DenseMat_default_instance_);
}
inline const ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat& Graph::dense() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.dense)
  return _internal_dense();
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* Graph::unsafe_arena_release_dense() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.dense)
  if (_internal_has_dense()) {
    clear_has_adj();
    ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* temp = adj_.dense_;
    adj_.dense_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Graph::unsafe_arena_set_allocated_dense(::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* dense) {
  clear_adj();
  if (dense) {
    set_has_dense();
    adj_.dense_ = dense;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.dense)
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* Graph::_internal_mutable_dense() {
  if (!_internal_has_dense()) {
    clear_adj();
    set_has_dense();
    adj_.dense_ = CreateMaybeMessage< ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat >(
        GetArenaNoVirtual());
  }
  return adj_.dense_;
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* Graph::mutable_dense() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.dense)
  return _internal_mutable_dense();
}

// .com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat coo = 11;
inline bool Graph::_internal_has_coo() const {
  return adj_case() == kCoo;
}
inline bool Graph::has_coo() const {
  return _internal_has_coo();
}
inline void Graph::set_has_coo() {
  _oneof_case_[0] = kCoo;
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* Graph::release_coo() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.coo)
  if (_internal_has_coo()) {
    clear_has_adj();
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* temp = adj_.coo_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    adj_.coo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat& Graph::_internal_coo() const {
  return _internal_has_coo()
      ? *adj_.coo_
      : *reinterpret_cast< ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat*>(&::com::hitnslab::dnssecurity::deeparcher::api::proto::_CooMat_default_instance_);
}
inline const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat& Graph::coo() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.coo)
  return _internal_coo();
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* Graph::unsafe_arena_release_coo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.coo)
  if (_internal_has_coo()) {
    clear_has_adj();
    ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* temp = adj_.coo_;
    adj_.coo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Graph::unsafe_arena_set_allocated_coo(::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* coo) {
  clear_adj();
  if (coo) {
    set_has_coo();
    adj_.coo_ = coo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.coo)
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* Graph::_internal_mutable_coo() {
  if (!_internal_has_coo()) {
    clear_adj();
    set_has_coo();
    adj_.coo_ = CreateMaybeMessage< ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat >(
        GetArenaNoVirtual());
  }
  return adj_.coo_;
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* Graph::mutable_coo() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.coo)
  return _internal_mutable_coo();
}

// .com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat csr = 12;
inline bool Graph::_internal_has_csr() const {
  return adj_case() == kCsr;
}
inline bool Graph::has_csr() const {
  return _internal_has_csr();
}
inline void Graph::set_has_csr() {
  _oneof_case_[0] = kCsr;
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* Graph::release_csr() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csr)
  if (_internal_has_csr()) {
    clear_has_adj();
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* temp = adj_.csr_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    adj_.csr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat& Graph::_internal_csr() const {
  return _internal_has_csr()
      ? *adj_.csr_
      : *reinterpret_cast< ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat*>(&::com::hitnslab::dnssecurity::deeparcher::api::proto::_CsrMat_default_instance_);
}
inline const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat& Graph::csr() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csr)
  return _internal_csr();
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* Graph::unsafe_arena_release_csr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csr)
  if (_internal_has_csr()) {
    clear_has_adj();
    ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* temp = adj_.csr_;
    adj_.csr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Graph::unsafe_arena_set_allocated_csr(::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* csr) {
  clear_adj();
  if (csr) {
    set_has_csr();
    adj_.csr_ = csr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csr)
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* Graph::_internal_mutable_csr() {
  if (!_internal_has_csr()) {
    clear_adj();
    set_has_csr();
    adj_.csr_ = CreateMaybeMessage< ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat >(
        GetArenaNoVirtual());
  }
  return adj_.csr_;
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* Graph::mutable_csr() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csr)
  return _internal_mutable_csr();
}

// .com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat csc = 13;
inline bool Graph::_internal_has_csc() const {
  return adj_case() == kCsc;
}
inline bool Graph::has_csc() const {
  return _internal_has_csc();
}
inline void Graph::set_has_csc() {
  _oneof_case_[0] = kCsc;
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* Graph::release_csc() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csc)
  if (_internal_has_csc()) {
    clear_has_adj();
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* temp = adj_.csc_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    adj_.csc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat& Graph::_internal_csc() const {
  return _internal_has_csc()
      ? *adj_.csc_
      : *reinterpret_cast< ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat*>(&::com::hitnslab::dnssecurity::deeparcher::api::proto::_CscMat_default_instance_);
}
inline const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat& Graph::csc() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csc)
  return _internal_csc();
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* Graph::unsafe_arena_release_csc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csc)
  if (_internal_has_csc()) {
    clear_has_adj();
    ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* temp = adj_.csc_;
    adj_.csc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Graph::unsafe_arena_set_allocated_csc(::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* csc) {
  clear_adj();
  if (csc) {
    set_has_csc();
    adj_.csc_ = csc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csc)
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* Graph::_internal_mutable_csc() {
  if (!_internal_has_csc()) {
    clear_adj();
    set_has_csc();
    adj_.csc_ = CreateMaybeMessage< ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat >(
        GetArenaNoVirtual());
  }
  return adj_.csc_;
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* Graph::mutable_csc() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csc)
  return _internal_mutable_csc();
}

// bool directed = 16;
inline void Graph::clear_directed() {
  directed_ = false;
}
inline bool Graph::_internal_directed() const {
  return directed_;
}
inline bool Graph::directed() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.directed)
  return _internal_directed();
}
inline void Graph::_internal_set_directed(bool value) {
  
  directed_ = value;
}
inline void Graph::set_directed(bool value) {
  _internal_set_directed(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.directed)
}

// bool connected = 17;
inline void Graph::clear_connected() {
  connected_ = false;
}
inline bool Graph::_internal_connected() const {
  return connected_;
}
inline bool Graph::connected() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.connected)
  return _internal_connected();
}
inline void Graph::_internal_set_connected(bool value) {
  
  connected_ = value;
}
inline void Graph::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.connected)
}

// bool unweighted = 18;
inline void Graph::clear_unweighted() {
  unweighted_ = false;
}
inline bool Graph::_internal_unweighted() const {
  return unweighted_;
}
inline bool Graph::unweighted() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.unweighted)
  return _internal_unweighted();
}
inline void Graph::_internal_set_unweighted(bool value) {
  
  unweighted_ = value;
}
inline void Graph::set_unweighted(bool value) {
  _internal_set_unweighted(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.unweighted)
}

// repeated uint64 node_id_remap = 19;
inline int Graph::_internal_node_id_remap_size() const {
  return node_id_remap_.size();
}
inline int Graph::node_id_remap_size() const {
  return _internal_node_id_remap_size();
}
inline void Graph::clear_node_id_remap() {
  node_id_remap_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Graph::_internal_node_id_remap(int index) const {
  return node_id_remap_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Graph::node_id_remap(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.node_id_remap)
  return _internal_node_id_remap(index);
}
inline void Graph::set_node_id_remap(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  node_id_remap_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.node_id_remap)
}
inline void Graph::_internal_add_node_id_remap(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  node_id_remap_.Add(value);
}
inline void Graph::add_node_id_remap(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_node_id_remap(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.node_id_remap)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Graph::_internal_node_id_remap() const {
  return node_id_remap_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Graph::node_id_remap() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.node_id_remap)
  return _internal_node_id_remap();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Graph::_internal_mutable_node_id_remap() {
  return &node_id_remap_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Graph::mutable_node_id_remap() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.node_id_remap)
  return _internal_mutable_node_id_remap();
}

// repeated .google.protobuf.Any attributes = 32;
inline int Graph::_internal_attributes_size() const {
  return attributes_.size();
}
inline int Graph::attributes_size() const {
  return _internal_attributes_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* Graph::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
Graph::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.attributes)
  return &attributes_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& Graph::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Graph::attributes(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.attributes)
  return _internal_attributes(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* Graph::_internal_add_attributes() {
  return attributes_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* Graph::add_attributes() {
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
Graph::attributes() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.attributes)
  return attributes_;
}

inline bool Graph::has_adj() const {
  return adj_case() != ADJ_NOT_SET;
}
inline void Graph::clear_has_adj() {
  _oneof_case_[0] = ADJ_NOT_SET;
}
inline Graph::AdjCase Graph::adj_case() const {
  return Graph::AdjCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ComponentAttr

// uint64 parent_id = 1;
inline void ComponentAttr::clear_parent_id() {
  parent_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ComponentAttr::_internal_parent_id() const {
  return parent_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ComponentAttr::parent_id() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr.parent_id)
  return _internal_parent_id();
}
inline void ComponentAttr::_internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  parent_id_ = value;
}
inline void ComponentAttr::set_parent_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr.parent_id)
}

// uint64 component_id = 2;
inline void ComponentAttr::clear_component_id() {
  component_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ComponentAttr::_internal_component_id() const {
  return component_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ComponentAttr::component_id() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr.component_id)
  return _internal_component_id();
}
inline void ComponentAttr::_internal_set_component_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  component_id_ = value;
}
inline void ComponentAttr::set_component_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr.component_id)
}

// repeated uint64 components = 3;
inline int ComponentAttr::_internal_components_size() const {
  return components_.size();
}
inline int ComponentAttr::components_size() const {
  return _internal_components_size();
}
inline void ComponentAttr::clear_components() {
  components_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ComponentAttr::_internal_components(int index) const {
  return components_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ComponentAttr::components(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr.components)
  return _internal_components(index);
}
inline void ComponentAttr::set_components(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  components_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr.components)
}
inline void ComponentAttr::_internal_add_components(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  components_.Add(value);
}
inline void ComponentAttr::add_components(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_components(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr.components)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ComponentAttr::_internal_components() const {
  return components_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ComponentAttr::components() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr.components)
  return _internal_components();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ComponentAttr::_internal_mutable_components() {
  return &components_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ComponentAttr::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.ComponentAttr.components)
  return _internal_mutable_components();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto
