// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/hitnslab/dnssecurity/deeparcher/api/proto/graph.proto

package com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java;

public final class GraphProto {
  private GraphProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface GraphOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Graph ID.
     * This should be the offset of graph update event stream.
     * NOT NULL. 
     * </pre>
     *
     * <code>int64 id = 1;</code>
     * @return The id.
     */
    long getId();

    /**
     * <pre>
     * Number of nodes in graph.
     * NOT NULL. 
     * </pre>
     *
     * <code>int64 nodes = 2;</code>
     * @return The nodes.
     */
    long getNodes();

    /**
     * <pre>
     * Number of edges in graph.
     * NOT NULL. 
     * </pre>
     *
     * <code>int64 edges = 3;</code>
     * @return The edges.
     */
    long getEdges();

    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
     * @return Whether the dense field is set.
     */
    boolean hasDense();
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
     * @return The dense.
     */
    com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat getDense();
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
     */
    com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloatOrBuilder getDenseOrBuilder();

    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
     * @return Whether the coo field is set.
     */
    boolean hasCoo();
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
     * @return The coo.
     */
    com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat getCoo();
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
     */
    com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloatOrBuilder getCooOrBuilder();

    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
     * @return Whether the csr field is set.
     */
    boolean hasCsr();
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
     * @return The csr.
     */
    com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat getCsr();
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
     */
    com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloatOrBuilder getCsrOrBuilder();

    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
     * @return Whether the csc field is set.
     */
    boolean hasCsc();
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
     * @return The csc.
     */
    com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat getCsc();
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
     */
    com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloatOrBuilder getCscOrBuilder();

    /**
     * <pre>
     * If true, then this is a directed graph.
     * NULLABLE, default = false. 
     * </pre>
     *
     * <code>bool directed = 16;</code>
     * @return The directed.
     */
    boolean getDirected();

    /**
     * <pre>
     * If true, then this is a connected graph without any isolated node.
     * NULLABLE, default = false. 
     * </pre>
     *
     * <code>bool connected = 17;</code>
     * @return The connected.
     */
    boolean getConnected();

    /**
     * <pre>
     * If true, then this is a unweighted graph.
     * NULLABLE, default = false. 
     * </pre>
     *
     * <code>bool unweighted = 18;</code>
     * @return The unweighted.
     */
    boolean getUnweighted();

    /**
     * <pre>
     * If present, then it means all node ids in this graph are consecutive.
     * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated uint64 node_id_remap = 19;</code>
     * @return A list containing the nodeIdRemap.
     */
    java.util.List<java.lang.Long> getNodeIdRemapList();
    /**
     * <pre>
     * If present, then it means all node ids in this graph are consecutive.
     * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated uint64 node_id_remap = 19;</code>
     * @return The count of nodeIdRemap.
     */
    int getNodeIdRemapCount();
    /**
     * <pre>
     * If present, then it means all node ids in this graph are consecutive.
     * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated uint64 node_id_remap = 19;</code>
     * @param index The index of the element to return.
     * @return The nodeIdRemap at the given index.
     */
    long getNodeIdRemap(int index);

    /**
     * <pre>
     * General attributes related to this graph.
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated .google.protobuf.Any attributes = 32;</code>
     */
    java.util.List<com.google.protobuf.Any> 
        getAttributesList();
    /**
     * <pre>
     * General attributes related to this graph.
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated .google.protobuf.Any attributes = 32;</code>
     */
    com.google.protobuf.Any getAttributes(int index);
    /**
     * <pre>
     * General attributes related to this graph.
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated .google.protobuf.Any attributes = 32;</code>
     */
    int getAttributesCount();
    /**
     * <pre>
     * General attributes related to this graph.
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated .google.protobuf.Any attributes = 32;</code>
     */
    java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
        getAttributesOrBuilderList();
    /**
     * <pre>
     * General attributes related to this graph.
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated .google.protobuf.Any attributes = 32;</code>
     */
    com.google.protobuf.AnyOrBuilder getAttributesOrBuilder(
        int index);

    public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph.AdjCase getAdjCase();
  }
  /**
   * Protobuf type {@code com.hitnslab.dnssecurity.deeparcher.api.proto.Graph}
   */
  public static final class Graph extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
      GraphOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Graph.newBuilder() to construct.
    private Graph(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Graph() {
      nodeIdRemap_ = emptyLongList();
      attributes_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Graph();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Graph(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              id_ = input.readInt64();
              break;
            }
            case 16: {

              nodes_ = input.readInt64();
              break;
            }
            case 24: {

              edges_ = input.readInt64();
              break;
            }
            case 82: {
              com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.Builder subBuilder = null;
              if (adjCase_ == 10) {
                subBuilder = ((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat) adj_).toBuilder();
              }
              adj_ =
                  input.readMessage(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat) adj_);
                adj_ = subBuilder.buildPartial();
              }
              adjCase_ = 10;
              break;
            }
            case 90: {
              com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.Builder subBuilder = null;
              if (adjCase_ == 11) {
                subBuilder = ((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat) adj_).toBuilder();
              }
              adj_ =
                  input.readMessage(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat) adj_);
                adj_ = subBuilder.buildPartial();
              }
              adjCase_ = 11;
              break;
            }
            case 98: {
              com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.Builder subBuilder = null;
              if (adjCase_ == 12) {
                subBuilder = ((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat) adj_).toBuilder();
              }
              adj_ =
                  input.readMessage(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat) adj_);
                adj_ = subBuilder.buildPartial();
              }
              adjCase_ = 12;
              break;
            }
            case 106: {
              com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.Builder subBuilder = null;
              if (adjCase_ == 13) {
                subBuilder = ((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat) adj_).toBuilder();
              }
              adj_ =
                  input.readMessage(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat) adj_);
                adj_ = subBuilder.buildPartial();
              }
              adjCase_ = 13;
              break;
            }
            case 128: {

              directed_ = input.readBool();
              break;
            }
            case 136: {

              connected_ = input.readBool();
              break;
            }
            case 144: {

              unweighted_ = input.readBool();
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                nodeIdRemap_ = newLongList();
                mutable_bitField0_ |= 0x00000001;
              }
              nodeIdRemap_.addLong(input.readUInt64());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                nodeIdRemap_ = newLongList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                nodeIdRemap_.addLong(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 258: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                attributes_ = new java.util.ArrayList<com.google.protobuf.Any>();
                mutable_bitField0_ |= 0x00000002;
              }
              attributes_.add(
                  input.readMessage(com.google.protobuf.Any.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          nodeIdRemap_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          attributes_ = java.util.Collections.unmodifiableList(attributes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.internal_static_com_hitnslab_dnssecurity_deeparcher_api_proto_Graph_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.internal_static_com_hitnslab_dnssecurity_deeparcher_api_proto_Graph_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph.class, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph.Builder.class);
    }

    private int adjCase_ = 0;
    private java.lang.Object adj_;
    public enum AdjCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      DENSE(10),
      COO(11),
      CSR(12),
      CSC(13),
      ADJ_NOT_SET(0);
      private final int value;
      private AdjCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AdjCase valueOf(int value) {
        return forNumber(value);
      }

      public static AdjCase forNumber(int value) {
        switch (value) {
          case 10: return DENSE;
          case 11: return COO;
          case 12: return CSR;
          case 13: return CSC;
          case 0: return ADJ_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public AdjCase
    getAdjCase() {
      return AdjCase.forNumber(
          adjCase_);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <pre>
     * Graph ID.
     * This should be the offset of graph update event stream.
     * NOT NULL. 
     * </pre>
     *
     * <code>int64 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }

    public static final int NODES_FIELD_NUMBER = 2;
    private long nodes_;
    /**
     * <pre>
     * Number of nodes in graph.
     * NOT NULL. 
     * </pre>
     *
     * <code>int64 nodes = 2;</code>
     * @return The nodes.
     */
    @java.lang.Override
    public long getNodes() {
      return nodes_;
    }

    public static final int EDGES_FIELD_NUMBER = 3;
    private long edges_;
    /**
     * <pre>
     * Number of edges in graph.
     * NOT NULL. 
     * </pre>
     *
     * <code>int64 edges = 3;</code>
     * @return The edges.
     */
    @java.lang.Override
    public long getEdges() {
      return edges_;
    }

    public static final int DENSE_FIELD_NUMBER = 10;
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
     * @return Whether the dense field is set.
     */
    @java.lang.Override
    public boolean hasDense() {
      return adjCase_ == 10;
    }
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
     * @return The dense.
     */
    @java.lang.Override
    public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat getDense() {
      if (adjCase_ == 10) {
         return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat) adj_;
      }
      return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.getDefaultInstance();
    }
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
     */
    @java.lang.Override
    public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloatOrBuilder getDenseOrBuilder() {
      if (adjCase_ == 10) {
         return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat) adj_;
      }
      return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.getDefaultInstance();
    }

    public static final int COO_FIELD_NUMBER = 11;
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
     * @return Whether the coo field is set.
     */
    @java.lang.Override
    public boolean hasCoo() {
      return adjCase_ == 11;
    }
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
     * @return The coo.
     */
    @java.lang.Override
    public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat getCoo() {
      if (adjCase_ == 11) {
         return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat) adj_;
      }
      return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.getDefaultInstance();
    }
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
     */
    @java.lang.Override
    public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloatOrBuilder getCooOrBuilder() {
      if (adjCase_ == 11) {
         return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat) adj_;
      }
      return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.getDefaultInstance();
    }

    public static final int CSR_FIELD_NUMBER = 12;
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
     * @return Whether the csr field is set.
     */
    @java.lang.Override
    public boolean hasCsr() {
      return adjCase_ == 12;
    }
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
     * @return The csr.
     */
    @java.lang.Override
    public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat getCsr() {
      if (adjCase_ == 12) {
         return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat) adj_;
      }
      return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.getDefaultInstance();
    }
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
     */
    @java.lang.Override
    public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloatOrBuilder getCsrOrBuilder() {
      if (adjCase_ == 12) {
         return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat) adj_;
      }
      return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.getDefaultInstance();
    }

    public static final int CSC_FIELD_NUMBER = 13;
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
     * @return Whether the csc field is set.
     */
    @java.lang.Override
    public boolean hasCsc() {
      return adjCase_ == 13;
    }
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
     * @return The csc.
     */
    @java.lang.Override
    public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat getCsc() {
      if (adjCase_ == 13) {
         return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat) adj_;
      }
      return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.getDefaultInstance();
    }
    /**
     * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
     */
    @java.lang.Override
    public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloatOrBuilder getCscOrBuilder() {
      if (adjCase_ == 13) {
         return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat) adj_;
      }
      return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.getDefaultInstance();
    }

    public static final int DIRECTED_FIELD_NUMBER = 16;
    private boolean directed_;
    /**
     * <pre>
     * If true, then this is a directed graph.
     * NULLABLE, default = false. 
     * </pre>
     *
     * <code>bool directed = 16;</code>
     * @return The directed.
     */
    @java.lang.Override
    public boolean getDirected() {
      return directed_;
    }

    public static final int CONNECTED_FIELD_NUMBER = 17;
    private boolean connected_;
    /**
     * <pre>
     * If true, then this is a connected graph without any isolated node.
     * NULLABLE, default = false. 
     * </pre>
     *
     * <code>bool connected = 17;</code>
     * @return The connected.
     */
    @java.lang.Override
    public boolean getConnected() {
      return connected_;
    }

    public static final int UNWEIGHTED_FIELD_NUMBER = 18;
    private boolean unweighted_;
    /**
     * <pre>
     * If true, then this is a unweighted graph.
     * NULLABLE, default = false. 
     * </pre>
     *
     * <code>bool unweighted = 18;</code>
     * @return The unweighted.
     */
    @java.lang.Override
    public boolean getUnweighted() {
      return unweighted_;
    }

    public static final int NODE_ID_REMAP_FIELD_NUMBER = 19;
    private com.google.protobuf.Internal.LongList nodeIdRemap_;
    /**
     * <pre>
     * If present, then it means all node ids in this graph are consecutive.
     * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated uint64 node_id_remap = 19;</code>
     * @return A list containing the nodeIdRemap.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getNodeIdRemapList() {
      return nodeIdRemap_;
    }
    /**
     * <pre>
     * If present, then it means all node ids in this graph are consecutive.
     * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated uint64 node_id_remap = 19;</code>
     * @return The count of nodeIdRemap.
     */
    public int getNodeIdRemapCount() {
      return nodeIdRemap_.size();
    }
    /**
     * <pre>
     * If present, then it means all node ids in this graph are consecutive.
     * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated uint64 node_id_remap = 19;</code>
     * @param index The index of the element to return.
     * @return The nodeIdRemap at the given index.
     */
    public long getNodeIdRemap(int index) {
      return nodeIdRemap_.getLong(index);
    }
    private int nodeIdRemapMemoizedSerializedSize = -1;

    public static final int ATTRIBUTES_FIELD_NUMBER = 32;
    private java.util.List<com.google.protobuf.Any> attributes_;
    /**
     * <pre>
     * General attributes related to this graph.
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated .google.protobuf.Any attributes = 32;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.Any> getAttributesList() {
      return attributes_;
    }
    /**
     * <pre>
     * General attributes related to this graph.
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated .google.protobuf.Any attributes = 32;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
        getAttributesOrBuilderList() {
      return attributes_;
    }
    /**
     * <pre>
     * General attributes related to this graph.
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated .google.protobuf.Any attributes = 32;</code>
     */
    @java.lang.Override
    public int getAttributesCount() {
      return attributes_.size();
    }
    /**
     * <pre>
     * General attributes related to this graph.
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated .google.protobuf.Any attributes = 32;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Any getAttributes(int index) {
      return attributes_.get(index);
    }
    /**
     * <pre>
     * General attributes related to this graph.
     * NULLABLE. 
     * </pre>
     *
     * <code>repeated .google.protobuf.Any attributes = 32;</code>
     */
    @java.lang.Override
    public com.google.protobuf.AnyOrBuilder getAttributesOrBuilder(
        int index) {
      return attributes_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (id_ != 0L) {
        output.writeInt64(1, id_);
      }
      if (nodes_ != 0L) {
        output.writeInt64(2, nodes_);
      }
      if (edges_ != 0L) {
        output.writeInt64(3, edges_);
      }
      if (adjCase_ == 10) {
        output.writeMessage(10, (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat) adj_);
      }
      if (adjCase_ == 11) {
        output.writeMessage(11, (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat) adj_);
      }
      if (adjCase_ == 12) {
        output.writeMessage(12, (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat) adj_);
      }
      if (adjCase_ == 13) {
        output.writeMessage(13, (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat) adj_);
      }
      if (directed_ != false) {
        output.writeBool(16, directed_);
      }
      if (connected_ != false) {
        output.writeBool(17, connected_);
      }
      if (unweighted_ != false) {
        output.writeBool(18, unweighted_);
      }
      if (getNodeIdRemapList().size() > 0) {
        output.writeUInt32NoTag(154);
        output.writeUInt32NoTag(nodeIdRemapMemoizedSerializedSize);
      }
      for (int i = 0; i < nodeIdRemap_.size(); i++) {
        output.writeUInt64NoTag(nodeIdRemap_.getLong(i));
      }
      for (int i = 0; i < attributes_.size(); i++) {
        output.writeMessage(32, attributes_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, id_);
      }
      if (nodes_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, nodes_);
      }
      if (edges_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, edges_);
      }
      if (adjCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat) adj_);
      }
      if (adjCase_ == 11) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat) adj_);
      }
      if (adjCase_ == 12) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat) adj_);
      }
      if (adjCase_ == 13) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat) adj_);
      }
      if (directed_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, directed_);
      }
      if (connected_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, connected_);
      }
      if (unweighted_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, unweighted_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < nodeIdRemap_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(nodeIdRemap_.getLong(i));
        }
        size += dataSize;
        if (!getNodeIdRemapList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        nodeIdRemapMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < attributes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, attributes_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph)) {
        return super.equals(obj);
      }
      com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph other = (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph) obj;

      if (getId()
          != other.getId()) return false;
      if (getNodes()
          != other.getNodes()) return false;
      if (getEdges()
          != other.getEdges()) return false;
      if (getDirected()
          != other.getDirected()) return false;
      if (getConnected()
          != other.getConnected()) return false;
      if (getUnweighted()
          != other.getUnweighted()) return false;
      if (!getNodeIdRemapList()
          .equals(other.getNodeIdRemapList())) return false;
      if (!getAttributesList()
          .equals(other.getAttributesList())) return false;
      if (!getAdjCase().equals(other.getAdjCase())) return false;
      switch (adjCase_) {
        case 10:
          if (!getDense()
              .equals(other.getDense())) return false;
          break;
        case 11:
          if (!getCoo()
              .equals(other.getCoo())) return false;
          break;
        case 12:
          if (!getCsr()
              .equals(other.getCsr())) return false;
          break;
        case 13:
          if (!getCsc()
              .equals(other.getCsc())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
      hash = (37 * hash) + NODES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNodes());
      hash = (37 * hash) + EDGES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getEdges());
      hash = (37 * hash) + DIRECTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDirected());
      hash = (37 * hash) + CONNECTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getConnected());
      hash = (37 * hash) + UNWEIGHTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUnweighted());
      if (getNodeIdRemapCount() > 0) {
        hash = (37 * hash) + NODE_ID_REMAP_FIELD_NUMBER;
        hash = (53 * hash) + getNodeIdRemapList().hashCode();
      }
      if (getAttributesCount() > 0) {
        hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
        hash = (53 * hash) + getAttributesList().hashCode();
      }
      switch (adjCase_) {
        case 10:
          hash = (37 * hash) + DENSE_FIELD_NUMBER;
          hash = (53 * hash) + getDense().hashCode();
          break;
        case 11:
          hash = (37 * hash) + COO_FIELD_NUMBER;
          hash = (53 * hash) + getCoo().hashCode();
          break;
        case 12:
          hash = (37 * hash) + CSR_FIELD_NUMBER;
          hash = (53 * hash) + getCsr().hashCode();
          break;
        case 13:
          hash = (37 * hash) + CSC_FIELD_NUMBER;
          hash = (53 * hash) + getCsc().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.hitnslab.dnssecurity.deeparcher.api.proto.Graph}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
        com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.GraphOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.internal_static_com_hitnslab_dnssecurity_deeparcher_api_proto_Graph_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.internal_static_com_hitnslab_dnssecurity_deeparcher_api_proto_Graph_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph.class, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph.Builder.class);
      }

      // Construct using com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAttributesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = 0L;

        nodes_ = 0L;

        edges_ = 0L;

        directed_ = false;

        connected_ = false;

        unweighted_ = false;

        nodeIdRemap_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (attributesBuilder_ == null) {
          attributes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          attributesBuilder_.clear();
        }
        adjCase_ = 0;
        adj_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.internal_static_com_hitnslab_dnssecurity_deeparcher_api_proto_Graph_descriptor;
      }

      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph getDefaultInstanceForType() {
        return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph.getDefaultInstance();
      }

      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph build() {
        com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph buildPartial() {
        com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph result = new com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph(this);
        int from_bitField0_ = bitField0_;
        result.id_ = id_;
        result.nodes_ = nodes_;
        result.edges_ = edges_;
        if (adjCase_ == 10) {
          if (denseBuilder_ == null) {
            result.adj_ = adj_;
          } else {
            result.adj_ = denseBuilder_.build();
          }
        }
        if (adjCase_ == 11) {
          if (cooBuilder_ == null) {
            result.adj_ = adj_;
          } else {
            result.adj_ = cooBuilder_.build();
          }
        }
        if (adjCase_ == 12) {
          if (csrBuilder_ == null) {
            result.adj_ = adj_;
          } else {
            result.adj_ = csrBuilder_.build();
          }
        }
        if (adjCase_ == 13) {
          if (cscBuilder_ == null) {
            result.adj_ = adj_;
          } else {
            result.adj_ = cscBuilder_.build();
          }
        }
        result.directed_ = directed_;
        result.connected_ = connected_;
        result.unweighted_ = unweighted_;
        if (((bitField0_ & 0x00000001) != 0)) {
          nodeIdRemap_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.nodeIdRemap_ = nodeIdRemap_;
        if (attributesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            attributes_ = java.util.Collections.unmodifiableList(attributes_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.attributes_ = attributes_;
        } else {
          result.attributes_ = attributesBuilder_.build();
        }
        result.adjCase_ = adjCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph) {
          return mergeFrom((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph other) {
        if (other == com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph.getDefaultInstance()) return this;
        if (other.getId() != 0L) {
          setId(other.getId());
        }
        if (other.getNodes() != 0L) {
          setNodes(other.getNodes());
        }
        if (other.getEdges() != 0L) {
          setEdges(other.getEdges());
        }
        if (other.getDirected() != false) {
          setDirected(other.getDirected());
        }
        if (other.getConnected() != false) {
          setConnected(other.getConnected());
        }
        if (other.getUnweighted() != false) {
          setUnweighted(other.getUnweighted());
        }
        if (!other.nodeIdRemap_.isEmpty()) {
          if (nodeIdRemap_.isEmpty()) {
            nodeIdRemap_ = other.nodeIdRemap_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureNodeIdRemapIsMutable();
            nodeIdRemap_.addAll(other.nodeIdRemap_);
          }
          onChanged();
        }
        if (attributesBuilder_ == null) {
          if (!other.attributes_.isEmpty()) {
            if (attributes_.isEmpty()) {
              attributes_ = other.attributes_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureAttributesIsMutable();
              attributes_.addAll(other.attributes_);
            }
            onChanged();
          }
        } else {
          if (!other.attributes_.isEmpty()) {
            if (attributesBuilder_.isEmpty()) {
              attributesBuilder_.dispose();
              attributesBuilder_ = null;
              attributes_ = other.attributes_;
              bitField0_ = (bitField0_ & ~0x00000002);
              attributesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getAttributesFieldBuilder() : null;
            } else {
              attributesBuilder_.addAllMessages(other.attributes_);
            }
          }
        }
        switch (other.getAdjCase()) {
          case DENSE: {
            mergeDense(other.getDense());
            break;
          }
          case COO: {
            mergeCoo(other.getCoo());
            break;
          }
          case CSR: {
            mergeCsr(other.getCsr());
            break;
          }
          case CSC: {
            mergeCsc(other.getCsc());
            break;
          }
          case ADJ_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int adjCase_ = 0;
      private java.lang.Object adj_;
      public AdjCase
          getAdjCase() {
        return AdjCase.forNumber(
            adjCase_);
      }

      public Builder clearAdj() {
        adjCase_ = 0;
        adj_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private long id_ ;
      /**
       * <pre>
       * Graph ID.
       * This should be the offset of graph update event stream.
       * NOT NULL. 
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * Graph ID.
       * This should be the offset of graph update event stream.
       * NOT NULL. 
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(long value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Graph ID.
       * This should be the offset of graph update event stream.
       * NOT NULL. 
       * </pre>
       *
       * <code>int64 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = 0L;
        onChanged();
        return this;
      }

      private long nodes_ ;
      /**
       * <pre>
       * Number of nodes in graph.
       * NOT NULL. 
       * </pre>
       *
       * <code>int64 nodes = 2;</code>
       * @return The nodes.
       */
      @java.lang.Override
      public long getNodes() {
        return nodes_;
      }
      /**
       * <pre>
       * Number of nodes in graph.
       * NOT NULL. 
       * </pre>
       *
       * <code>int64 nodes = 2;</code>
       * @param value The nodes to set.
       * @return This builder for chaining.
       */
      public Builder setNodes(long value) {
        
        nodes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of nodes in graph.
       * NOT NULL. 
       * </pre>
       *
       * <code>int64 nodes = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNodes() {
        
        nodes_ = 0L;
        onChanged();
        return this;
      }

      private long edges_ ;
      /**
       * <pre>
       * Number of edges in graph.
       * NOT NULL. 
       * </pre>
       *
       * <code>int64 edges = 3;</code>
       * @return The edges.
       */
      @java.lang.Override
      public long getEdges() {
        return edges_;
      }
      /**
       * <pre>
       * Number of edges in graph.
       * NOT NULL. 
       * </pre>
       *
       * <code>int64 edges = 3;</code>
       * @param value The edges to set.
       * @return This builder for chaining.
       */
      public Builder setEdges(long value) {
        
        edges_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of edges in graph.
       * NOT NULL. 
       * </pre>
       *
       * <code>int64 edges = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearEdges() {
        
        edges_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloatOrBuilder> denseBuilder_;
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
       * @return Whether the dense field is set.
       */
      @java.lang.Override
      public boolean hasDense() {
        return adjCase_ == 10;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
       * @return The dense.
       */
      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat getDense() {
        if (denseBuilder_ == null) {
          if (adjCase_ == 10) {
            return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat) adj_;
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.getDefaultInstance();
        } else {
          if (adjCase_ == 10) {
            return denseBuilder_.getMessage();
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.getDefaultInstance();
        }
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
       */
      public Builder setDense(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat value) {
        if (denseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          adj_ = value;
          onChanged();
        } else {
          denseBuilder_.setMessage(value);
        }
        adjCase_ = 10;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
       */
      public Builder setDense(
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.Builder builderForValue) {
        if (denseBuilder_ == null) {
          adj_ = builderForValue.build();
          onChanged();
        } else {
          denseBuilder_.setMessage(builderForValue.build());
        }
        adjCase_ = 10;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
       */
      public Builder mergeDense(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat value) {
        if (denseBuilder_ == null) {
          if (adjCase_ == 10 &&
              adj_ != com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.getDefaultInstance()) {
            adj_ = com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.newBuilder((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat) adj_)
                .mergeFrom(value).buildPartial();
          } else {
            adj_ = value;
          }
          onChanged();
        } else {
          if (adjCase_ == 10) {
            denseBuilder_.mergeFrom(value);
          }
          denseBuilder_.setMessage(value);
        }
        adjCase_ = 10;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
       */
      public Builder clearDense() {
        if (denseBuilder_ == null) {
          if (adjCase_ == 10) {
            adjCase_ = 0;
            adj_ = null;
            onChanged();
          }
        } else {
          if (adjCase_ == 10) {
            adjCase_ = 0;
            adj_ = null;
          }
          denseBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
       */
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.Builder getDenseBuilder() {
        return getDenseFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
       */
      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloatOrBuilder getDenseOrBuilder() {
        if ((adjCase_ == 10) && (denseBuilder_ != null)) {
          return denseBuilder_.getMessageOrBuilder();
        } else {
          if (adjCase_ == 10) {
            return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat) adj_;
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.getDefaultInstance();
        }
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloatOrBuilder> 
          getDenseFieldBuilder() {
        if (denseBuilder_ == null) {
          if (!(adjCase_ == 10)) {
            adj_ = com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.getDefaultInstance();
          }
          denseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloatOrBuilder>(
                  (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.DenseMatFloat) adj_,
                  getParentForChildren(),
                  isClean());
          adj_ = null;
        }
        adjCase_ = 10;
        onChanged();;
        return denseBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloatOrBuilder> cooBuilder_;
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
       * @return Whether the coo field is set.
       */
      @java.lang.Override
      public boolean hasCoo() {
        return adjCase_ == 11;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
       * @return The coo.
       */
      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat getCoo() {
        if (cooBuilder_ == null) {
          if (adjCase_ == 11) {
            return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat) adj_;
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.getDefaultInstance();
        } else {
          if (adjCase_ == 11) {
            return cooBuilder_.getMessage();
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.getDefaultInstance();
        }
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
       */
      public Builder setCoo(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat value) {
        if (cooBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          adj_ = value;
          onChanged();
        } else {
          cooBuilder_.setMessage(value);
        }
        adjCase_ = 11;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
       */
      public Builder setCoo(
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.Builder builderForValue) {
        if (cooBuilder_ == null) {
          adj_ = builderForValue.build();
          onChanged();
        } else {
          cooBuilder_.setMessage(builderForValue.build());
        }
        adjCase_ = 11;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
       */
      public Builder mergeCoo(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat value) {
        if (cooBuilder_ == null) {
          if (adjCase_ == 11 &&
              adj_ != com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.getDefaultInstance()) {
            adj_ = com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.newBuilder((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat) adj_)
                .mergeFrom(value).buildPartial();
          } else {
            adj_ = value;
          }
          onChanged();
        } else {
          if (adjCase_ == 11) {
            cooBuilder_.mergeFrom(value);
          }
          cooBuilder_.setMessage(value);
        }
        adjCase_ = 11;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
       */
      public Builder clearCoo() {
        if (cooBuilder_ == null) {
          if (adjCase_ == 11) {
            adjCase_ = 0;
            adj_ = null;
            onChanged();
          }
        } else {
          if (adjCase_ == 11) {
            adjCase_ = 0;
            adj_ = null;
          }
          cooBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
       */
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.Builder getCooBuilder() {
        return getCooFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
       */
      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloatOrBuilder getCooOrBuilder() {
        if ((adjCase_ == 11) && (cooBuilder_ != null)) {
          return cooBuilder_.getMessageOrBuilder();
        } else {
          if (adjCase_ == 11) {
            return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat) adj_;
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.getDefaultInstance();
        }
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloatOrBuilder> 
          getCooFieldBuilder() {
        if (cooBuilder_ == null) {
          if (!(adjCase_ == 11)) {
            adj_ = com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.getDefaultInstance();
          }
          cooBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloatOrBuilder>(
                  (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CooMatFloat) adj_,
                  getParentForChildren(),
                  isClean());
          adj_ = null;
        }
        adjCase_ = 11;
        onChanged();;
        return cooBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloatOrBuilder> csrBuilder_;
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
       * @return Whether the csr field is set.
       */
      @java.lang.Override
      public boolean hasCsr() {
        return adjCase_ == 12;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
       * @return The csr.
       */
      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat getCsr() {
        if (csrBuilder_ == null) {
          if (adjCase_ == 12) {
            return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat) adj_;
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.getDefaultInstance();
        } else {
          if (adjCase_ == 12) {
            return csrBuilder_.getMessage();
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.getDefaultInstance();
        }
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
       */
      public Builder setCsr(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat value) {
        if (csrBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          adj_ = value;
          onChanged();
        } else {
          csrBuilder_.setMessage(value);
        }
        adjCase_ = 12;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
       */
      public Builder setCsr(
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.Builder builderForValue) {
        if (csrBuilder_ == null) {
          adj_ = builderForValue.build();
          onChanged();
        } else {
          csrBuilder_.setMessage(builderForValue.build());
        }
        adjCase_ = 12;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
       */
      public Builder mergeCsr(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat value) {
        if (csrBuilder_ == null) {
          if (adjCase_ == 12 &&
              adj_ != com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.getDefaultInstance()) {
            adj_ = com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.newBuilder((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat) adj_)
                .mergeFrom(value).buildPartial();
          } else {
            adj_ = value;
          }
          onChanged();
        } else {
          if (adjCase_ == 12) {
            csrBuilder_.mergeFrom(value);
          }
          csrBuilder_.setMessage(value);
        }
        adjCase_ = 12;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
       */
      public Builder clearCsr() {
        if (csrBuilder_ == null) {
          if (adjCase_ == 12) {
            adjCase_ = 0;
            adj_ = null;
            onChanged();
          }
        } else {
          if (adjCase_ == 12) {
            adjCase_ = 0;
            adj_ = null;
          }
          csrBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
       */
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.Builder getCsrBuilder() {
        return getCsrFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
       */
      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloatOrBuilder getCsrOrBuilder() {
        if ((adjCase_ == 12) && (csrBuilder_ != null)) {
          return csrBuilder_.getMessageOrBuilder();
        } else {
          if (adjCase_ == 12) {
            return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat) adj_;
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.getDefaultInstance();
        }
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloatOrBuilder> 
          getCsrFieldBuilder() {
        if (csrBuilder_ == null) {
          if (!(adjCase_ == 12)) {
            adj_ = com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.getDefaultInstance();
          }
          csrBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloatOrBuilder>(
                  (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CsrMatFloat) adj_,
                  getParentForChildren(),
                  isClean());
          adj_ = null;
        }
        adjCase_ = 12;
        onChanged();;
        return csrBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloatOrBuilder> cscBuilder_;
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
       * @return Whether the csc field is set.
       */
      @java.lang.Override
      public boolean hasCsc() {
        return adjCase_ == 13;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
       * @return The csc.
       */
      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat getCsc() {
        if (cscBuilder_ == null) {
          if (adjCase_ == 13) {
            return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat) adj_;
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.getDefaultInstance();
        } else {
          if (adjCase_ == 13) {
            return cscBuilder_.getMessage();
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.getDefaultInstance();
        }
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
       */
      public Builder setCsc(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat value) {
        if (cscBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          adj_ = value;
          onChanged();
        } else {
          cscBuilder_.setMessage(value);
        }
        adjCase_ = 13;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
       */
      public Builder setCsc(
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.Builder builderForValue) {
        if (cscBuilder_ == null) {
          adj_ = builderForValue.build();
          onChanged();
        } else {
          cscBuilder_.setMessage(builderForValue.build());
        }
        adjCase_ = 13;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
       */
      public Builder mergeCsc(com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat value) {
        if (cscBuilder_ == null) {
          if (adjCase_ == 13 &&
              adj_ != com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.getDefaultInstance()) {
            adj_ = com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.newBuilder((com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat) adj_)
                .mergeFrom(value).buildPartial();
          } else {
            adj_ = value;
          }
          onChanged();
        } else {
          if (adjCase_ == 13) {
            cscBuilder_.mergeFrom(value);
          }
          cscBuilder_.setMessage(value);
        }
        adjCase_ = 13;
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
       */
      public Builder clearCsc() {
        if (cscBuilder_ == null) {
          if (adjCase_ == 13) {
            adjCase_ = 0;
            adj_ = null;
            onChanged();
          }
        } else {
          if (adjCase_ == 13) {
            adjCase_ = 0;
            adj_ = null;
          }
          cscBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
       */
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.Builder getCscBuilder() {
        return getCscFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
       */
      @java.lang.Override
      public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloatOrBuilder getCscOrBuilder() {
        if ((adjCase_ == 13) && (cscBuilder_ != null)) {
          return cscBuilder_.getMessageOrBuilder();
        } else {
          if (adjCase_ == 13) {
            return (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat) adj_;
          }
          return com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.getDefaultInstance();
        }
      }
      /**
       * <code>.com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloatOrBuilder> 
          getCscFieldBuilder() {
        if (cscBuilder_ == null) {
          if (!(adjCase_ == 13)) {
            adj_ = com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.getDefaultInstance();
          }
          cscBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat.Builder, com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloatOrBuilder>(
                  (com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.CscMatFloat) adj_,
                  getParentForChildren(),
                  isClean());
          adj_ = null;
        }
        adjCase_ = 13;
        onChanged();;
        return cscBuilder_;
      }

      private boolean directed_ ;
      /**
       * <pre>
       * If true, then this is a directed graph.
       * NULLABLE, default = false. 
       * </pre>
       *
       * <code>bool directed = 16;</code>
       * @return The directed.
       */
      @java.lang.Override
      public boolean getDirected() {
        return directed_;
      }
      /**
       * <pre>
       * If true, then this is a directed graph.
       * NULLABLE, default = false. 
       * </pre>
       *
       * <code>bool directed = 16;</code>
       * @param value The directed to set.
       * @return This builder for chaining.
       */
      public Builder setDirected(boolean value) {
        
        directed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, then this is a directed graph.
       * NULLABLE, default = false. 
       * </pre>
       *
       * <code>bool directed = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearDirected() {
        
        directed_ = false;
        onChanged();
        return this;
      }

      private boolean connected_ ;
      /**
       * <pre>
       * If true, then this is a connected graph without any isolated node.
       * NULLABLE, default = false. 
       * </pre>
       *
       * <code>bool connected = 17;</code>
       * @return The connected.
       */
      @java.lang.Override
      public boolean getConnected() {
        return connected_;
      }
      /**
       * <pre>
       * If true, then this is a connected graph without any isolated node.
       * NULLABLE, default = false. 
       * </pre>
       *
       * <code>bool connected = 17;</code>
       * @param value The connected to set.
       * @return This builder for chaining.
       */
      public Builder setConnected(boolean value) {
        
        connected_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, then this is a connected graph without any isolated node.
       * NULLABLE, default = false. 
       * </pre>
       *
       * <code>bool connected = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearConnected() {
        
        connected_ = false;
        onChanged();
        return this;
      }

      private boolean unweighted_ ;
      /**
       * <pre>
       * If true, then this is a unweighted graph.
       * NULLABLE, default = false. 
       * </pre>
       *
       * <code>bool unweighted = 18;</code>
       * @return The unweighted.
       */
      @java.lang.Override
      public boolean getUnweighted() {
        return unweighted_;
      }
      /**
       * <pre>
       * If true, then this is a unweighted graph.
       * NULLABLE, default = false. 
       * </pre>
       *
       * <code>bool unweighted = 18;</code>
       * @param value The unweighted to set.
       * @return This builder for chaining.
       */
      public Builder setUnweighted(boolean value) {
        
        unweighted_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, then this is a unweighted graph.
       * NULLABLE, default = false. 
       * </pre>
       *
       * <code>bool unweighted = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnweighted() {
        
        unweighted_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList nodeIdRemap_ = emptyLongList();
      private void ensureNodeIdRemapIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          nodeIdRemap_ = mutableCopy(nodeIdRemap_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * If present, then it means all node ids in this graph are consecutive.
       * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated uint64 node_id_remap = 19;</code>
       * @return A list containing the nodeIdRemap.
       */
      public java.util.List<java.lang.Long>
          getNodeIdRemapList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(nodeIdRemap_) : nodeIdRemap_;
      }
      /**
       * <pre>
       * If present, then it means all node ids in this graph are consecutive.
       * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated uint64 node_id_remap = 19;</code>
       * @return The count of nodeIdRemap.
       */
      public int getNodeIdRemapCount() {
        return nodeIdRemap_.size();
      }
      /**
       * <pre>
       * If present, then it means all node ids in this graph are consecutive.
       * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated uint64 node_id_remap = 19;</code>
       * @param index The index of the element to return.
       * @return The nodeIdRemap at the given index.
       */
      public long getNodeIdRemap(int index) {
        return nodeIdRemap_.getLong(index);
      }
      /**
       * <pre>
       * If present, then it means all node ids in this graph are consecutive.
       * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated uint64 node_id_remap = 19;</code>
       * @param index The index to set the value at.
       * @param value The nodeIdRemap to set.
       * @return This builder for chaining.
       */
      public Builder setNodeIdRemap(
          int index, long value) {
        ensureNodeIdRemapIsMutable();
        nodeIdRemap_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If present, then it means all node ids in this graph are consecutive.
       * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated uint64 node_id_remap = 19;</code>
       * @param value The nodeIdRemap to add.
       * @return This builder for chaining.
       */
      public Builder addNodeIdRemap(long value) {
        ensureNodeIdRemapIsMutable();
        nodeIdRemap_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If present, then it means all node ids in this graph are consecutive.
       * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated uint64 node_id_remap = 19;</code>
       * @param values The nodeIdRemap to add.
       * @return This builder for chaining.
       */
      public Builder addAllNodeIdRemap(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureNodeIdRemapIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, nodeIdRemap_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If present, then it means all node ids in this graph are consecutive.
       * Actual node id, which will be used to fetch node attributes from global attributes store, can be obtained by node_id_remap[node_id].
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated uint64 node_id_remap = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearNodeIdRemap() {
        nodeIdRemap_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.Any> attributes_ =
        java.util.Collections.emptyList();
      private void ensureAttributesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          attributes_ = new java.util.ArrayList<com.google.protobuf.Any>(attributes_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> attributesBuilder_;

      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public java.util.List<com.google.protobuf.Any> getAttributesList() {
        if (attributesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(attributes_);
        } else {
          return attributesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public int getAttributesCount() {
        if (attributesBuilder_ == null) {
          return attributes_.size();
        } else {
          return attributesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public com.google.protobuf.Any getAttributes(int index) {
        if (attributesBuilder_ == null) {
          return attributes_.get(index);
        } else {
          return attributesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public Builder setAttributes(
          int index, com.google.protobuf.Any value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.set(index, value);
          onChanged();
        } else {
          attributesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public Builder setAttributes(
          int index, com.google.protobuf.Any.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.set(index, builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public Builder addAttributes(com.google.protobuf.Any value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.add(value);
          onChanged();
        } else {
          attributesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public Builder addAttributes(
          int index, com.google.protobuf.Any value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.add(index, value);
          onChanged();
        } else {
          attributesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public Builder addAttributes(
          com.google.protobuf.Any.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.add(builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public Builder addAttributes(
          int index, com.google.protobuf.Any.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.add(index, builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public Builder addAllAttributes(
          java.lang.Iterable<? extends com.google.protobuf.Any> values) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, attributes_);
          onChanged();
        } else {
          attributesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public Builder clearAttributes() {
        if (attributesBuilder_ == null) {
          attributes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          attributesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public Builder removeAttributes(int index) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.remove(index);
          onChanged();
        } else {
          attributesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public com.google.protobuf.Any.Builder getAttributesBuilder(
          int index) {
        return getAttributesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public com.google.protobuf.AnyOrBuilder getAttributesOrBuilder(
          int index) {
        if (attributesBuilder_ == null) {
          return attributes_.get(index);  } else {
          return attributesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
           getAttributesOrBuilderList() {
        if (attributesBuilder_ != null) {
          return attributesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(attributes_);
        }
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public com.google.protobuf.Any.Builder addAttributesBuilder() {
        return getAttributesFieldBuilder().addBuilder(
            com.google.protobuf.Any.getDefaultInstance());
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public com.google.protobuf.Any.Builder addAttributesBuilder(
          int index) {
        return getAttributesFieldBuilder().addBuilder(
            index, com.google.protobuf.Any.getDefaultInstance());
      }
      /**
       * <pre>
       * General attributes related to this graph.
       * NULLABLE. 
       * </pre>
       *
       * <code>repeated .google.protobuf.Any attributes = 32;</code>
       */
      public java.util.List<com.google.protobuf.Any.Builder> 
           getAttributesBuilderList() {
        return getAttributesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
          getAttributesFieldBuilder() {
        if (attributesBuilder_ == null) {
          attributesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                  attributes_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          attributes_ = null;
        }
        return attributesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
    }

    // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
    private static final com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph();
    }

    public static com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Graph>
        PARSER = new com.google.protobuf.AbstractParser<Graph>() {
      @java.lang.Override
      public Graph parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Graph(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Graph> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Graph> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.GraphProto.Graph getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hitnslab_dnssecurity_deeparcher_api_proto_Graph_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hitnslab_dnssecurity_deeparcher_api_proto_Graph_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n9com/hitnslab/dnssecurity/deeparcher/ap" +
      "i/proto/graph.proto\022-com.hitnslab.dnssec" +
      "urity.deeparcher.api.proto\032:com/hitnslab" +
      "/dnssecurity/deeparcher/api/proto/matrix" +
      ".proto\032\031google/protobuf/any.proto\"\342\003\n\005Gr" +
      "aph\022\n\n\002id\030\001 \001(\003\022\r\n\005nodes\030\002 \001(\003\022\r\n\005edges\030" +
      "\003 \001(\003\022M\n\005dense\030\n \001(\0132<.com.hitnslab.dnss" +
      "ecurity.deeparcher.api.proto.DenseMatFlo" +
      "atH\000\022I\n\003coo\030\013 \001(\0132:.com.hitnslab.dnssecu" +
      "rity.deeparcher.api.proto.CooMatFloatH\000\022" +
      "I\n\003csr\030\014 \001(\0132:.com.hitnslab.dnssecurity." +
      "deeparcher.api.proto.CsrMatFloatH\000\022I\n\003cs" +
      "c\030\r \001(\0132:.com.hitnslab.dnssecurity.deepa" +
      "rcher.api.proto.CscMatFloatH\000\022\020\n\010directe" +
      "d\030\020 \001(\010\022\021\n\tconnected\030\021 \001(\010\022\022\n\nunweighted" +
      "\030\022 \001(\010\022\025\n\rnode_id_remap\030\023 \003(\004\022(\n\nattribu" +
      "tes\030  \003(\0132\024.google.protobuf.AnyB\005\n\003adjBO" +
      "\n<com.hitnslab.dnssecurity.deeparcher.ap" +
      "i.proto.generated.javaB\nGraphProtoH\001\370\001\001b" +
      "\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.getDescriptor(),
          com.google.protobuf.AnyProto.getDescriptor(),
        });
    internal_static_com_hitnslab_dnssecurity_deeparcher_api_proto_Graph_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_hitnslab_dnssecurity_deeparcher_api_proto_Graph_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hitnslab_dnssecurity_deeparcher_api_proto_Graph_descriptor,
        new java.lang.String[] { "Id", "Nodes", "Edges", "Dense", "Coo", "Csr", "Csc", "Directed", "Connected", "Unweighted", "NodeIdRemap", "Attributes", "Adj", });
    com.hitnslab.dnssecurity.deeparcher.api.proto.generated.java.MatrixProto.getDescriptor();
    com.google.protobuf.AnyProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
