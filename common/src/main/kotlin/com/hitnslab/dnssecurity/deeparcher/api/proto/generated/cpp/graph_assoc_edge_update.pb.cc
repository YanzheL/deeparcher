// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/hitnslab/dnssecurity/deeparcher/api/proto/graph_assoc_edge_update.proto

#include "com/hitnslab/dnssecurity/deeparcher/api/proto/graph_assoc_edge_update.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {
class GraphAssocEdgeUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphAssocEdgeUpdate> _instance;
} _GraphAssocEdgeUpdate_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
static void InitDefaultsscc_info_GraphAssocEdgeUpdate_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::hitnslab::dnssecurity::deeparcher::api::proto::_GraphAssocEdgeUpdate_default_instance_;
    new (ptr) ::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphAssocEdgeUpdate_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GraphAssocEdgeUpdate_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate, fqdn1_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate, fqdn2_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate, n_shared_fields_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::hitnslab::dnssecurity::deeparcher::api::proto::_GraphAssocEdgeUpdate_default_instance_),
};

const char descriptor_table_protodef_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nKcom/hitnslab/dnssecurity/deeparcher/ap"
  "i/proto/graph_assoc_edge_update.proto\022-c"
  "om.hitnslab.dnssecurity.deeparcher.api.p"
  "roto\"M\n\024GraphAssocEdgeUpdate\022\r\n\005fqdn1\030\001 "
  "\001(\t\022\r\n\005fqdn2\030\002 \001(\t\022\027\n\017n_shared_fields\030\003 "
  "\001(\005B^\n<com.hitnslab.dnssecurity.deeparch"
  "er.api.proto.generated.javaB\031GraphAssocE"
  "dgeUpdateProtoH\001\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto_sccs[1] = {
  &scc_info_GraphAssocEdgeUpdate_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto_once;
static bool descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto = {
  &descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto_initialized, descriptor_table_protodef_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto, "com/hitnslab/dnssecurity/deeparcher/api/proto/graph_assoc_edge_update.proto", 307,
  &descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto_once, descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto_sccs, descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto::offsets,
  file_level_metadata_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto, 1, file_level_enum_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto, file_level_service_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto), true);
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {

// ===================================================================

void GraphAssocEdgeUpdate::InitAsDefaultInstance() {
}
class GraphAssocEdgeUpdate::_Internal {
 public:
};

GraphAssocEdgeUpdate::GraphAssocEdgeUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
}
GraphAssocEdgeUpdate::GraphAssocEdgeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
}
GraphAssocEdgeUpdate::GraphAssocEdgeUpdate(const GraphAssocEdgeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fqdn1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fqdn1().empty()) {
    fqdn1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fqdn1(),
      GetArenaNoVirtual());
  }
  fqdn2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fqdn2().empty()) {
    fqdn2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fqdn2(),
      GetArenaNoVirtual());
  }
  n_shared_fields_ = from.n_shared_fields_;
  // @@protoc_insertion_point(copy_constructor:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
}

void GraphAssocEdgeUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphAssocEdgeUpdate_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto.base);
  fqdn1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fqdn2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_shared_fields_ = 0;
}

GraphAssocEdgeUpdate::~GraphAssocEdgeUpdate() {
  // @@protoc_insertion_point(destructor:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
  SharedDtor();
}

void GraphAssocEdgeUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  fqdn1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fqdn2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphAssocEdgeUpdate::ArenaDtor(void* object) {
  GraphAssocEdgeUpdate* _this = reinterpret_cast< GraphAssocEdgeUpdate* >(object);
  (void)_this;
}
void GraphAssocEdgeUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphAssocEdgeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphAssocEdgeUpdate& GraphAssocEdgeUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphAssocEdgeUpdate_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto.base);
  return *internal_default_instance();
}


void GraphAssocEdgeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fqdn1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  fqdn2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  n_shared_fields_ = 0;
  _internal_metadata_.Clear();
}

const char* GraphAssocEdgeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fqdn1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fqdn1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fqdn2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fqdn2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_shared_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          n_shared_fields_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphAssocEdgeUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fqdn1 = 1;
  if (this->fqdn1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fqdn1().data(), static_cast<int>(this->_internal_fqdn1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fqdn1(), target);
  }

  // string fqdn2 = 2;
  if (this->fqdn2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fqdn2().data(), static_cast<int>(this->_internal_fqdn2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fqdn2(), target);
  }

  // int32 n_shared_fields = 3;
  if (this->n_shared_fields() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_n_shared_fields(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
  return target;
}

size_t GraphAssocEdgeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fqdn1 = 1;
  if (this->fqdn1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fqdn1());
  }

  // string fqdn2 = 2;
  if (this->fqdn2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fqdn2());
  }

  // int32 n_shared_fields = 3;
  if (this->n_shared_fields() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n_shared_fields());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphAssocEdgeUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphAssocEdgeUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphAssocEdgeUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
    MergeFrom(*source);
  }
}

void GraphAssocEdgeUpdate::MergeFrom(const GraphAssocEdgeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fqdn1().size() > 0) {
    _internal_set_fqdn1(from._internal_fqdn1());
  }
  if (from.fqdn2().size() > 0) {
    _internal_set_fqdn2(from._internal_fqdn2());
  }
  if (from.n_shared_fields() != 0) {
    _internal_set_n_shared_fields(from._internal_n_shared_fields());
  }
}

void GraphAssocEdgeUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphAssocEdgeUpdate::CopyFrom(const GraphAssocEdgeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphAssocEdgeUpdate::IsInitialized() const {
  return true;
}

void GraphAssocEdgeUpdate::InternalSwap(GraphAssocEdgeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fqdn1_.Swap(&other->fqdn1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fqdn2_.Swap(&other->fqdn2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(n_shared_fields_, other->n_shared_fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphAssocEdgeUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate* Arena::CreateMaybeMessage< ::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
