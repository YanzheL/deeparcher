// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/hitnslab/dnssecurity/deeparcher/api/proto/known_malicious_domain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto;
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {
class KnownMaliciousDomain;
class KnownMaliciousDomainDefaultTypeInternal;
extern KnownMaliciousDomainDefaultTypeInternal _KnownMaliciousDomain_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {

enum KnownMaliciousDomain_Status : int {
  KnownMaliciousDomain_Status_UNKNOWN = 0,
  KnownMaliciousDomain_Status_ACTIVE = 1,
  KnownMaliciousDomain_Status_HOLD = 2,
  KnownMaliciousDomain_Status_DEAD = 3,
  KnownMaliciousDomain_Status_OTHER = 4,
  KnownMaliciousDomain_Status_KnownMaliciousDomain_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KnownMaliciousDomain_Status_KnownMaliciousDomain_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KnownMaliciousDomain_Status_IsValid(int value);
constexpr KnownMaliciousDomain_Status KnownMaliciousDomain_Status_Status_MIN = KnownMaliciousDomain_Status_UNKNOWN;
constexpr KnownMaliciousDomain_Status KnownMaliciousDomain_Status_Status_MAX = KnownMaliciousDomain_Status_OTHER;
constexpr int KnownMaliciousDomain_Status_Status_ARRAYSIZE = KnownMaliciousDomain_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KnownMaliciousDomain_Status_descriptor();
template<typename T>
inline const std::string& KnownMaliciousDomain_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KnownMaliciousDomain_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KnownMaliciousDomain_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KnownMaliciousDomain_Status_descriptor(), enum_t_value);
}
inline bool KnownMaliciousDomain_Status_Parse(
    const std::string& name, KnownMaliciousDomain_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KnownMaliciousDomain_Status>(
    KnownMaliciousDomain_Status_descriptor(), name, value);
}
// ===================================================================

class KnownMaliciousDomain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain) */ {
 public:
  KnownMaliciousDomain();
  virtual ~KnownMaliciousDomain();

  KnownMaliciousDomain(const KnownMaliciousDomain& from);
  KnownMaliciousDomain(KnownMaliciousDomain&& from) noexcept
    : KnownMaliciousDomain() {
    *this = ::std::move(from);
  }

  inline KnownMaliciousDomain& operator=(const KnownMaliciousDomain& from) {
    CopyFrom(from);
    return *this;
  }
  inline KnownMaliciousDomain& operator=(KnownMaliciousDomain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KnownMaliciousDomain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KnownMaliciousDomain* internal_default_instance() {
    return reinterpret_cast<const KnownMaliciousDomain*>(
               &_KnownMaliciousDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KnownMaliciousDomain& a, KnownMaliciousDomain& b) {
    a.Swap(&b);
  }
  inline void Swap(KnownMaliciousDomain* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KnownMaliciousDomain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KnownMaliciousDomain* New() const final {
    return CreateMaybeMessage<KnownMaliciousDomain>(nullptr);
  }

  KnownMaliciousDomain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KnownMaliciousDomain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KnownMaliciousDomain& from);
  void MergeFrom(const KnownMaliciousDomain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KnownMaliciousDomain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain";
  }
  protected:
  explicit KnownMaliciousDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KnownMaliciousDomain_Status Status;
  static constexpr Status UNKNOWN =
    KnownMaliciousDomain_Status_UNKNOWN;
  static constexpr Status ACTIVE =
    KnownMaliciousDomain_Status_ACTIVE;
  static constexpr Status HOLD =
    KnownMaliciousDomain_Status_HOLD;
  static constexpr Status DEAD =
    KnownMaliciousDomain_Status_DEAD;
  static constexpr Status OTHER =
    KnownMaliciousDomain_Status_OTHER;
  static inline bool Status_IsValid(int value) {
    return KnownMaliciousDomain_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    KnownMaliciousDomain_Status_Status_MIN;
  static constexpr Status Status_MAX =
    KnownMaliciousDomain_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    KnownMaliciousDomain_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return KnownMaliciousDomain_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return KnownMaliciousDomain_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return KnownMaliciousDomain_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCnamesFieldNumber = 19,
    kSourceFieldNumber = 2,
    kMethodFieldNumber = 3,
    kFqdnFieldNumber = 4,
    kUrlFieldNumber = 5,
    kServiceTitleFieldNumber = 16,
    kIpv4AddrsFieldNumber = 17,
    kIpv6AddrsFieldNumber = 18,
    kTypeFieldNumber = 20,
    kRegistrarFieldNumber = 22,
    kRemarkFieldNumber = 23,
    kTimestampFieldNumber = 1,
    kCreatedAtFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
    kAsnFieldNumber = 21,
    kStatusFieldNumber = 24,
  };
  // repeated string cnames = 19;
  int cnames_size() const;
  private:
  int _internal_cnames_size() const;
  public:
  void clear_cnames();
  const std::string& cnames(int index) const;
  std::string* mutable_cnames(int index);
  void set_cnames(int index, const std::string& value);
  void set_cnames(int index, std::string&& value);
  void set_cnames(int index, const char* value);
  void set_cnames(int index, const char* value, size_t size);
  std::string* add_cnames();
  void add_cnames(const std::string& value);
  void add_cnames(std::string&& value);
  void add_cnames(const char* value);
  void add_cnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cnames();
  private:
  const std::string& _internal_cnames(int index) const;
  std::string* _internal_add_cnames();
  public:

  // string source = 2;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string method = 3;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method(
      std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string fqdn = 4;
  void clear_fqdn();
  const std::string& fqdn() const;
  void set_fqdn(const std::string& value);
  void set_fqdn(std::string&& value);
  void set_fqdn(const char* value);
  void set_fqdn(const char* value, size_t size);
  std::string* mutable_fqdn();
  std::string* release_fqdn();
  void set_allocated_fqdn(std::string* fqdn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fqdn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fqdn(
      std::string* fqdn);
  private:
  const std::string& _internal_fqdn() const;
  void _internal_set_fqdn(const std::string& value);
  std::string* _internal_mutable_fqdn();
  public:

  // string url = 5;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string service_title = 16;
  void clear_service_title();
  const std::string& service_title() const;
  void set_service_title(const std::string& value);
  void set_service_title(std::string&& value);
  void set_service_title(const char* value);
  void set_service_title(const char* value, size_t size);
  std::string* mutable_service_title();
  std::string* release_service_title();
  void set_allocated_service_title(std::string* service_title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_title(
      std::string* service_title);
  private:
  const std::string& _internal_service_title() const;
  void _internal_set_service_title(const std::string& value);
  std::string* _internal_mutable_service_title();
  public:

  // bytes ipv4_addrs = 17;
  void clear_ipv4_addrs();
  const std::string& ipv4_addrs() const;
  void set_ipv4_addrs(const std::string& value);
  void set_ipv4_addrs(std::string&& value);
  void set_ipv4_addrs(const char* value);
  void set_ipv4_addrs(const void* value, size_t size);
  std::string* mutable_ipv4_addrs();
  std::string* release_ipv4_addrs();
  void set_allocated_ipv4_addrs(std::string* ipv4_addrs);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipv4_addrs();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipv4_addrs(
      std::string* ipv4_addrs);
  private:
  const std::string& _internal_ipv4_addrs() const;
  void _internal_set_ipv4_addrs(const std::string& value);
  std::string* _internal_mutable_ipv4_addrs();
  public:

  // bytes ipv6_addrs = 18;
  void clear_ipv6_addrs();
  const std::string& ipv6_addrs() const;
  void set_ipv6_addrs(const std::string& value);
  void set_ipv6_addrs(std::string&& value);
  void set_ipv6_addrs(const char* value);
  void set_ipv6_addrs(const void* value, size_t size);
  std::string* mutable_ipv6_addrs();
  std::string* release_ipv6_addrs();
  void set_allocated_ipv6_addrs(std::string* ipv6_addrs);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipv6_addrs();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipv6_addrs(
      std::string* ipv6_addrs);
  private:
  const std::string& _internal_ipv6_addrs() const;
  void _internal_set_ipv6_addrs(const std::string& value);
  std::string* _internal_mutable_ipv6_addrs();
  public:

  // string type = 20;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string registrar = 22;
  void clear_registrar();
  const std::string& registrar() const;
  void set_registrar(const std::string& value);
  void set_registrar(std::string&& value);
  void set_registrar(const char* value);
  void set_registrar(const char* value, size_t size);
  std::string* mutable_registrar();
  std::string* release_registrar();
  void set_allocated_registrar(std::string* registrar);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_registrar();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_registrar(
      std::string* registrar);
  private:
  const std::string& _internal_registrar() const;
  void _internal_set_registrar(const std::string& value);
  std::string* _internal_mutable_registrar();
  public:

  // string remark = 23;
  void clear_remark();
  const std::string& remark() const;
  void set_remark(const std::string& value);
  void set_remark(std::string&& value);
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  std::string* mutable_remark();
  std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_remark();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_remark(
      std::string* remark);
  private:
  const std::string& _internal_remark() const;
  void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 created_at = 6;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updated_at = 7;
  void clear_updated_at();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at() const;
  void set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_at() const;
  void _internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 asn = 21;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::int32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.Status status = 24;
  void clear_status();
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status status() const;
  void set_status(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status value);
  private:
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status _internal_status() const;
  void _internal_set_status(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status value);
  public:

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cnames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fqdn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_addrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_addrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registrar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 asn_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KnownMaliciousDomain

// int64 timestamp = 1;
inline void KnownMaliciousDomain::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KnownMaliciousDomain::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KnownMaliciousDomain::timestamp() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.timestamp)
  return _internal_timestamp();
}
inline void KnownMaliciousDomain::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void KnownMaliciousDomain::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.timestamp)
}

// string source = 2;
inline void KnownMaliciousDomain::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& KnownMaliciousDomain::source() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source)
  return _internal_source();
}
inline void KnownMaliciousDomain::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source)
}
inline std::string* KnownMaliciousDomain::mutable_source() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source)
  return _internal_mutable_source();
}
inline const std::string& KnownMaliciousDomain::_internal_source() const {
  return source_.Get();
}
inline void KnownMaliciousDomain::_internal_set_source(const std::string& value) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_source(std::string&& value) {
  
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source)
}
inline void KnownMaliciousDomain::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source)
}
inline void KnownMaliciousDomain::set_source(const char* value,
    size_t size) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source)
}
inline std::string* KnownMaliciousDomain::_internal_mutable_source() {
  
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* KnownMaliciousDomain::release_source() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source)
  
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source)
}
inline std::string* KnownMaliciousDomain::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (source != nullptr) {
    
  } else {
    
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source)
}

// string method = 3;
inline void KnownMaliciousDomain::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& KnownMaliciousDomain::method() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method)
  return _internal_method();
}
inline void KnownMaliciousDomain::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method)
}
inline std::string* KnownMaliciousDomain::mutable_method() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method)
  return _internal_mutable_method();
}
inline const std::string& KnownMaliciousDomain::_internal_method() const {
  return method_.Get();
}
inline void KnownMaliciousDomain::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method)
}
inline void KnownMaliciousDomain::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method)
}
inline void KnownMaliciousDomain::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method)
}
inline std::string* KnownMaliciousDomain::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* KnownMaliciousDomain::release_method() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method)
  
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method)
}
inline std::string* KnownMaliciousDomain::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return method_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::unsafe_arena_set_allocated_method(
    std::string* method) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (method != nullptr) {
    
  } else {
    
  }
  method_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method)
}

// string fqdn = 4;
inline void KnownMaliciousDomain::clear_fqdn() {
  fqdn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& KnownMaliciousDomain::fqdn() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn)
  return _internal_fqdn();
}
inline void KnownMaliciousDomain::set_fqdn(const std::string& value) {
  _internal_set_fqdn(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn)
}
inline std::string* KnownMaliciousDomain::mutable_fqdn() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn)
  return _internal_mutable_fqdn();
}
inline const std::string& KnownMaliciousDomain::_internal_fqdn() const {
  return fqdn_.Get();
}
inline void KnownMaliciousDomain::_internal_set_fqdn(const std::string& value) {
  
  fqdn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_fqdn(std::string&& value) {
  
  fqdn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn)
}
inline void KnownMaliciousDomain::set_fqdn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fqdn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn)
}
inline void KnownMaliciousDomain::set_fqdn(const char* value,
    size_t size) {
  
  fqdn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn)
}
inline std::string* KnownMaliciousDomain::_internal_mutable_fqdn() {
  
  return fqdn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* KnownMaliciousDomain::release_fqdn() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn)
  
  return fqdn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_allocated_fqdn(std::string* fqdn) {
  if (fqdn != nullptr) {
    
  } else {
    
  }
  fqdn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fqdn,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn)
}
inline std::string* KnownMaliciousDomain::unsafe_arena_release_fqdn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return fqdn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::unsafe_arena_set_allocated_fqdn(
    std::string* fqdn) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (fqdn != nullptr) {
    
  } else {
    
  }
  fqdn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fqdn, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn)
}

// string url = 5;
inline void KnownMaliciousDomain::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& KnownMaliciousDomain::url() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url)
  return _internal_url();
}
inline void KnownMaliciousDomain::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url)
}
inline std::string* KnownMaliciousDomain::mutable_url() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url)
  return _internal_mutable_url();
}
inline const std::string& KnownMaliciousDomain::_internal_url() const {
  return url_.Get();
}
inline void KnownMaliciousDomain::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url)
}
inline void KnownMaliciousDomain::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url)
}
inline void KnownMaliciousDomain::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url)
}
inline std::string* KnownMaliciousDomain::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* KnownMaliciousDomain::release_url() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url)
  
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url)
}
inline std::string* KnownMaliciousDomain::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url)
}

// int64 created_at = 6;
inline void KnownMaliciousDomain::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KnownMaliciousDomain::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KnownMaliciousDomain::created_at() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.created_at)
  return _internal_created_at();
}
inline void KnownMaliciousDomain::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void KnownMaliciousDomain::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.created_at)
}

// int64 updated_at = 7;
inline void KnownMaliciousDomain::clear_updated_at() {
  updated_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KnownMaliciousDomain::_internal_updated_at() const {
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KnownMaliciousDomain::updated_at() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.updated_at)
  return _internal_updated_at();
}
inline void KnownMaliciousDomain::_internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updated_at_ = value;
}
inline void KnownMaliciousDomain::set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.updated_at)
}

// string service_title = 16;
inline void KnownMaliciousDomain::clear_service_title() {
  service_title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& KnownMaliciousDomain::service_title() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title)
  return _internal_service_title();
}
inline void KnownMaliciousDomain::set_service_title(const std::string& value) {
  _internal_set_service_title(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title)
}
inline std::string* KnownMaliciousDomain::mutable_service_title() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title)
  return _internal_mutable_service_title();
}
inline const std::string& KnownMaliciousDomain::_internal_service_title() const {
  return service_title_.Get();
}
inline void KnownMaliciousDomain::_internal_set_service_title(const std::string& value) {
  
  service_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_service_title(std::string&& value) {
  
  service_title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title)
}
inline void KnownMaliciousDomain::set_service_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title)
}
inline void KnownMaliciousDomain::set_service_title(const char* value,
    size_t size) {
  
  service_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title)
}
inline std::string* KnownMaliciousDomain::_internal_mutable_service_title() {
  
  return service_title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* KnownMaliciousDomain::release_service_title() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title)
  
  return service_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_allocated_service_title(std::string* service_title) {
  if (service_title != nullptr) {
    
  } else {
    
  }
  service_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title)
}
inline std::string* KnownMaliciousDomain::unsafe_arena_release_service_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return service_title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::unsafe_arena_set_allocated_service_title(
    std::string* service_title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (service_title != nullptr) {
    
  } else {
    
  }
  service_title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title)
}

// bytes ipv4_addrs = 17;
inline void KnownMaliciousDomain::clear_ipv4_addrs() {
  ipv4_addrs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& KnownMaliciousDomain::ipv4_addrs() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv4_addrs)
  return _internal_ipv4_addrs();
}
inline void KnownMaliciousDomain::set_ipv4_addrs(const std::string& value) {
  _internal_set_ipv4_addrs(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv4_addrs)
}
inline std::string* KnownMaliciousDomain::mutable_ipv4_addrs() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv4_addrs)
  return _internal_mutable_ipv4_addrs();
}
inline const std::string& KnownMaliciousDomain::_internal_ipv4_addrs() const {
  return ipv4_addrs_.Get();
}
inline void KnownMaliciousDomain::_internal_set_ipv4_addrs(const std::string& value) {
  
  ipv4_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_ipv4_addrs(std::string&& value) {
  
  ipv4_addrs_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv4_addrs)
}
inline void KnownMaliciousDomain::set_ipv4_addrs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv4_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv4_addrs)
}
inline void KnownMaliciousDomain::set_ipv4_addrs(const void* value,
    size_t size) {
  
  ipv4_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv4_addrs)
}
inline std::string* KnownMaliciousDomain::_internal_mutable_ipv4_addrs() {
  
  return ipv4_addrs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* KnownMaliciousDomain::release_ipv4_addrs() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv4_addrs)
  
  return ipv4_addrs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_allocated_ipv4_addrs(std::string* ipv4_addrs) {
  if (ipv4_addrs != nullptr) {
    
  } else {
    
  }
  ipv4_addrs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv4_addrs,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv4_addrs)
}
inline std::string* KnownMaliciousDomain::unsafe_arena_release_ipv4_addrs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv4_addrs)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return ipv4_addrs_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::unsafe_arena_set_allocated_ipv4_addrs(
    std::string* ipv4_addrs) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (ipv4_addrs != nullptr) {
    
  } else {
    
  }
  ipv4_addrs_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv4_addrs, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv4_addrs)
}

// bytes ipv6_addrs = 18;
inline void KnownMaliciousDomain::clear_ipv6_addrs() {
  ipv6_addrs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& KnownMaliciousDomain::ipv6_addrs() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv6_addrs)
  return _internal_ipv6_addrs();
}
inline void KnownMaliciousDomain::set_ipv6_addrs(const std::string& value) {
  _internal_set_ipv6_addrs(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv6_addrs)
}
inline std::string* KnownMaliciousDomain::mutable_ipv6_addrs() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv6_addrs)
  return _internal_mutable_ipv6_addrs();
}
inline const std::string& KnownMaliciousDomain::_internal_ipv6_addrs() const {
  return ipv6_addrs_.Get();
}
inline void KnownMaliciousDomain::_internal_set_ipv6_addrs(const std::string& value) {
  
  ipv6_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_ipv6_addrs(std::string&& value) {
  
  ipv6_addrs_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv6_addrs)
}
inline void KnownMaliciousDomain::set_ipv6_addrs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv6_addrs)
}
inline void KnownMaliciousDomain::set_ipv6_addrs(const void* value,
    size_t size) {
  
  ipv6_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv6_addrs)
}
inline std::string* KnownMaliciousDomain::_internal_mutable_ipv6_addrs() {
  
  return ipv6_addrs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* KnownMaliciousDomain::release_ipv6_addrs() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv6_addrs)
  
  return ipv6_addrs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_allocated_ipv6_addrs(std::string* ipv6_addrs) {
  if (ipv6_addrs != nullptr) {
    
  } else {
    
  }
  ipv6_addrs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6_addrs,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv6_addrs)
}
inline std::string* KnownMaliciousDomain::unsafe_arena_release_ipv6_addrs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv6_addrs)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return ipv6_addrs_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::unsafe_arena_set_allocated_ipv6_addrs(
    std::string* ipv6_addrs) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (ipv6_addrs != nullptr) {
    
  } else {
    
  }
  ipv6_addrs_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipv6_addrs, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.ipv6_addrs)
}

// repeated string cnames = 19;
inline int KnownMaliciousDomain::_internal_cnames_size() const {
  return cnames_.size();
}
inline int KnownMaliciousDomain::cnames_size() const {
  return _internal_cnames_size();
}
inline void KnownMaliciousDomain::clear_cnames() {
  cnames_.Clear();
}
inline std::string* KnownMaliciousDomain::add_cnames() {
  // @@protoc_insertion_point(field_add_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
  return _internal_add_cnames();
}
inline const std::string& KnownMaliciousDomain::_internal_cnames(int index) const {
  return cnames_.Get(index);
}
inline const std::string& KnownMaliciousDomain::cnames(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
  return _internal_cnames(index);
}
inline std::string* KnownMaliciousDomain::mutable_cnames(int index) {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
  return cnames_.Mutable(index);
}
inline void KnownMaliciousDomain::set_cnames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
  cnames_.Mutable(index)->assign(value);
}
inline void KnownMaliciousDomain::set_cnames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
  cnames_.Mutable(index)->assign(std::move(value));
}
inline void KnownMaliciousDomain::set_cnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
}
inline void KnownMaliciousDomain::set_cnames(int index, const char* value, size_t size) {
  cnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
}
inline std::string* KnownMaliciousDomain::_internal_add_cnames() {
  return cnames_.Add();
}
inline void KnownMaliciousDomain::add_cnames(const std::string& value) {
  cnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
}
inline void KnownMaliciousDomain::add_cnames(std::string&& value) {
  cnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
}
inline void KnownMaliciousDomain::add_cnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
}
inline void KnownMaliciousDomain::add_cnames(const char* value, size_t size) {
  cnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
KnownMaliciousDomain::cnames() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
  return cnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
KnownMaliciousDomain::mutable_cnames() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames)
  return &cnames_;
}

// string type = 20;
inline void KnownMaliciousDomain::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& KnownMaliciousDomain::type() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type)
  return _internal_type();
}
inline void KnownMaliciousDomain::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type)
}
inline std::string* KnownMaliciousDomain::mutable_type() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type)
  return _internal_mutable_type();
}
inline const std::string& KnownMaliciousDomain::_internal_type() const {
  return type_.Get();
}
inline void KnownMaliciousDomain::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type)
}
inline void KnownMaliciousDomain::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type)
}
inline void KnownMaliciousDomain::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type)
}
inline std::string* KnownMaliciousDomain::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* KnownMaliciousDomain::release_type() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type)
  
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type)
}
inline std::string* KnownMaliciousDomain::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type)
}

// int32 asn = 21;
inline void KnownMaliciousDomain::clear_asn() {
  asn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KnownMaliciousDomain::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KnownMaliciousDomain::asn() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.asn)
  return _internal_asn();
}
inline void KnownMaliciousDomain::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  asn_ = value;
}
inline void KnownMaliciousDomain::set_asn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.asn)
}

// string registrar = 22;
inline void KnownMaliciousDomain::clear_registrar() {
  registrar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& KnownMaliciousDomain::registrar() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar)
  return _internal_registrar();
}
inline void KnownMaliciousDomain::set_registrar(const std::string& value) {
  _internal_set_registrar(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar)
}
inline std::string* KnownMaliciousDomain::mutable_registrar() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar)
  return _internal_mutable_registrar();
}
inline const std::string& KnownMaliciousDomain::_internal_registrar() const {
  return registrar_.Get();
}
inline void KnownMaliciousDomain::_internal_set_registrar(const std::string& value) {
  
  registrar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_registrar(std::string&& value) {
  
  registrar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar)
}
inline void KnownMaliciousDomain::set_registrar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  registrar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar)
}
inline void KnownMaliciousDomain::set_registrar(const char* value,
    size_t size) {
  
  registrar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar)
}
inline std::string* KnownMaliciousDomain::_internal_mutable_registrar() {
  
  return registrar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* KnownMaliciousDomain::release_registrar() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar)
  
  return registrar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_allocated_registrar(std::string* registrar) {
  if (registrar != nullptr) {
    
  } else {
    
  }
  registrar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registrar,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar)
}
inline std::string* KnownMaliciousDomain::unsafe_arena_release_registrar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return registrar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::unsafe_arena_set_allocated_registrar(
    std::string* registrar) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (registrar != nullptr) {
    
  } else {
    
  }
  registrar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      registrar, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar)
}

// string remark = 23;
inline void KnownMaliciousDomain::clear_remark() {
  remark_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& KnownMaliciousDomain::remark() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark)
  return _internal_remark();
}
inline void KnownMaliciousDomain::set_remark(const std::string& value) {
  _internal_set_remark(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark)
}
inline std::string* KnownMaliciousDomain::mutable_remark() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark)
  return _internal_mutable_remark();
}
inline const std::string& KnownMaliciousDomain::_internal_remark() const {
  return remark_.Get();
}
inline void KnownMaliciousDomain::_internal_set_remark(const std::string& value) {
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_remark(std::string&& value) {
  
  remark_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark)
}
inline void KnownMaliciousDomain::set_remark(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark)
}
inline void KnownMaliciousDomain::set_remark(const char* value,
    size_t size) {
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark)
}
inline std::string* KnownMaliciousDomain::_internal_mutable_remark() {
  
  return remark_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* KnownMaliciousDomain::release_remark() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark)
  
  return remark_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  remark_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remark,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark)
}
inline std::string* KnownMaliciousDomain::unsafe_arena_release_remark() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return remark_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KnownMaliciousDomain::unsafe_arena_set_allocated_remark(
    std::string* remark) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (remark != nullptr) {
    
  } else {
    
  }
  remark_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      remark, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark)
}

// .com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.Status status = 24;
inline void KnownMaliciousDomain::clear_status() {
  status_ = 0;
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status KnownMaliciousDomain::_internal_status() const {
  return static_cast< ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status >(status_);
}
inline ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status KnownMaliciousDomain::status() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.status)
  return _internal_status();
}
inline void KnownMaliciousDomain::_internal_set_status(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status value) {
  
  status_ = value;
}
inline void KnownMaliciousDomain::set_status(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status>() {
  return ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto
