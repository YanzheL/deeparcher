// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/hitnslab/dnssecurity/deeparcher/api/proto/known_malicious_domain.proto

#include "com/hitnslab/dnssecurity/deeparcher/api/proto/known_malicious_domain.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {
class KnownMaliciousDomainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KnownMaliciousDomain> _instance;
} _KnownMaliciousDomain_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
static void InitDefaultsscc_info_KnownMaliciousDomain_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::hitnslab::dnssecurity::deeparcher::api::proto::_KnownMaliciousDomain_default_instance_;
    new (ptr) ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KnownMaliciousDomain_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KnownMaliciousDomain_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, timestamp_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, source_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, method_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, fqdn_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, url_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, created_at_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, updated_at_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, service_title_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, ipv4_addrs_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, ipv6_addrs_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, cnames_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, type_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, asn_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, registrar_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, remark_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::hitnslab::dnssecurity::deeparcher::api::proto::_KnownMaliciousDomain_default_instance_),
};

const char descriptor_table_protodef_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nJcom/hitnslab/dnssecurity/deeparcher/ap"
  "i/proto/known_malicious_domain.proto\022-co"
  "m.hitnslab.dnssecurity.deeparcher.api.pr"
  "oto\"\267\003\n\024KnownMaliciousDomain\022\021\n\ttimestam"
  "p\030\001 \001(\003\022\016\n\006source\030\002 \001(\t\022\016\n\006method\030\003 \001(\t\022"
  "\014\n\004fqdn\030\004 \001(\t\022\013\n\003url\030\005 \001(\t\022\022\n\ncreated_at"
  "\030\006 \001(\003\022\022\n\nupdated_at\030\007 \001(\003\022\025\n\rservice_ti"
  "tle\030\010 \001(\t\022\022\n\nipv4_addrs\030\t \001(\014\022\022\n\nipv6_ad"
  "drs\030\n \001(\014\022\016\n\006cnames\030\013 \003(\t\022\014\n\004type\030\014 \001(\t\022"
  "\013\n\003asn\030\r \001(\005\022\021\n\tregistrar\030\016 \001(\t\022\016\n\006remar"
  "k\030\017 \001(\t\022Z\n\006status\030\020 \001(\0162J.com.hitnslab.d"
  "nssecurity.deeparcher.api.proto.KnownMal"
  "iciousDomain.Status\"@\n\006Status\022\013\n\007UNKNOWN"
  "\020\000\022\n\n\006ACTIVE\020\001\022\010\n\004HOLD\020\002\022\010\n\004DEAD\020\003\022\t\n\005OT"
  "HER\020\004BY\n7com.hitnslab.dnssecurity.deepar"
  "cher.api.proto.generatedB\031KnownMalicious"
  "DomainProtoH\001\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto_sccs[1] = {
  &scc_info_KnownMaliciousDomain_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto_once;
static bool descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto = {
  &descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto_initialized, descriptor_table_protodef_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto, "com/hitnslab/dnssecurity/deeparcher/api/proto/known_malicious_domain.proto", 664,
  &descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto_once, descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto_sccs, descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto::offsets,
  file_level_metadata_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto, 1, file_level_enum_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto, file_level_service_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto), true);
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KnownMaliciousDomain_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto);
  return file_level_enum_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto[0];
}
bool KnownMaliciousDomain_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KnownMaliciousDomain_Status KnownMaliciousDomain::UNKNOWN;
constexpr KnownMaliciousDomain_Status KnownMaliciousDomain::ACTIVE;
constexpr KnownMaliciousDomain_Status KnownMaliciousDomain::HOLD;
constexpr KnownMaliciousDomain_Status KnownMaliciousDomain::DEAD;
constexpr KnownMaliciousDomain_Status KnownMaliciousDomain::OTHER;
constexpr KnownMaliciousDomain_Status KnownMaliciousDomain::Status_MIN;
constexpr KnownMaliciousDomain_Status KnownMaliciousDomain::Status_MAX;
constexpr int KnownMaliciousDomain::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void KnownMaliciousDomain::InitAsDefaultInstance() {
}
class KnownMaliciousDomain::_Internal {
 public:
};

KnownMaliciousDomain::KnownMaliciousDomain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
}
KnownMaliciousDomain::KnownMaliciousDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  cnames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
}
KnownMaliciousDomain::KnownMaliciousDomain(const KnownMaliciousDomain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cnames_(from.cnames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArenaNoVirtual());
  }
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_method(),
      GetArenaNoVirtual());
  }
  fqdn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fqdn().empty()) {
    fqdn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fqdn(),
      GetArenaNoVirtual());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArenaNoVirtual());
  }
  service_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_title().empty()) {
    service_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_title(),
      GetArenaNoVirtual());
  }
  ipv4_addrs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv4_addrs().empty()) {
    ipv4_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipv4_addrs(),
      GetArenaNoVirtual());
  }
  ipv6_addrs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipv6_addrs().empty()) {
    ipv6_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipv6_addrs(),
      GetArenaNoVirtual());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArenaNoVirtual());
  }
  registrar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_registrar().empty()) {
    registrar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_registrar(),
      GetArenaNoVirtual());
  }
  remark_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remark().empty()) {
    remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remark(),
      GetArenaNoVirtual());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
}

void KnownMaliciousDomain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KnownMaliciousDomain_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fqdn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv4_addrs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_addrs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registrar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remark_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
}

KnownMaliciousDomain::~KnownMaliciousDomain() {
  // @@protoc_insertion_point(destructor:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
  SharedDtor();
}

void KnownMaliciousDomain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fqdn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv4_addrs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_addrs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registrar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remark_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KnownMaliciousDomain::ArenaDtor(void* object) {
  KnownMaliciousDomain* _this = reinterpret_cast< KnownMaliciousDomain* >(object);
  (void)_this;
}
void KnownMaliciousDomain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KnownMaliciousDomain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KnownMaliciousDomain& KnownMaliciousDomain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KnownMaliciousDomain_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fknown_5fmalicious_5fdomain_2eproto.base);
  return *internal_default_instance();
}


void KnownMaliciousDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cnames_.Clear();
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  fqdn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ipv4_addrs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ipv6_addrs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  registrar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  remark_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* KnownMaliciousDomain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fqdn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fqdn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updated_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_service_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ipv4_addrs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ipv4_addrs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ipv6_addrs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ipv6_addrs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string cnames = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cnames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 asn = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string registrar = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_registrar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remark = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_remark();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.Status status = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KnownMaliciousDomain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // string method = 3;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method(), target);
  }

  // string fqdn = 4;
  if (this->fqdn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fqdn().data(), static_cast<int>(this->_internal_fqdn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.fqdn");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fqdn(), target);
  }

  // string url = 5;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // int64 created_at = 6;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_created_at(), target);
  }

  // int64 updated_at = 7;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_updated_at(), target);
  }

  // string service_title = 8;
  if (this->service_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_title().data(), static_cast<int>(this->_internal_service_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.service_title");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_service_title(), target);
  }

  // bytes ipv4_addrs = 9;
  if (this->ipv4_addrs().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_ipv4_addrs(), target);
  }

  // bytes ipv6_addrs = 10;
  if (this->ipv6_addrs().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_ipv6_addrs(), target);
  }

  // repeated string cnames = 11;
  for (int i = 0, n = this->_internal_cnames_size(); i < n; i++) {
    const auto& s = this->_internal_cnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.cnames");
    target = stream->WriteString(11, s, target);
  }

  // string type = 12;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.type");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_type(), target);
  }

  // int32 asn = 13;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_asn(), target);
  }

  // string registrar = 14;
  if (this->registrar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_registrar().data(), static_cast<int>(this->_internal_registrar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.registrar");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_registrar(), target);
  }

  // string remark = 15;
  if (this->remark().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remark().data(), static_cast<int>(this->_internal_remark().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.remark");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_remark(), target);
  }

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.Status status = 16;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
  return target;
}

size_t KnownMaliciousDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cnames = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cnames_.size());
  for (int i = 0, n = cnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cnames_.Get(i));
  }

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string method = 3;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string fqdn = 4;
  if (this->fqdn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fqdn());
  }

  // string url = 5;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string service_title = 8;
  if (this->service_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_title());
  }

  // bytes ipv4_addrs = 9;
  if (this->ipv4_addrs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ipv4_addrs());
  }

  // bytes ipv6_addrs = 10;
  if (this->ipv6_addrs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ipv6_addrs());
  }

  // string type = 12;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string registrar = 14;
  if (this->registrar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_registrar());
  }

  // string remark = 15;
  if (this->remark().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remark());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 created_at = 6;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_created_at());
  }

  // int64 updated_at = 7;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updated_at());
  }

  // int32 asn = 13;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_asn());
  }

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain.Status status = 16;
  if (this->status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KnownMaliciousDomain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
  GOOGLE_DCHECK_NE(&from, this);
  const KnownMaliciousDomain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KnownMaliciousDomain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
    MergeFrom(*source);
  }
}

void KnownMaliciousDomain::MergeFrom(const KnownMaliciousDomain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cnames_.MergeFrom(from.cnames_);
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.method().size() > 0) {
    _internal_set_method(from._internal_method());
  }
  if (from.fqdn().size() > 0) {
    _internal_set_fqdn(from._internal_fqdn());
  }
  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
  if (from.service_title().size() > 0) {
    _internal_set_service_title(from._internal_service_title());
  }
  if (from.ipv4_addrs().size() > 0) {
    _internal_set_ipv4_addrs(from._internal_ipv4_addrs());
  }
  if (from.ipv6_addrs().size() > 0) {
    _internal_set_ipv6_addrs(from._internal_ipv6_addrs());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.registrar().size() > 0) {
    _internal_set_registrar(from._internal_registrar());
  }
  if (from.remark().size() > 0) {
    _internal_set_remark(from._internal_remark());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void KnownMaliciousDomain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KnownMaliciousDomain::CopyFrom(const KnownMaliciousDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.KnownMaliciousDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KnownMaliciousDomain::IsInitialized() const {
  return true;
}

void KnownMaliciousDomain::InternalSwap(KnownMaliciousDomain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cnames_.InternalSwap(&other->cnames_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fqdn_.Swap(&other->fqdn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_title_.Swap(&other->service_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipv4_addrs_.Swap(&other->ipv4_addrs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipv6_addrs_.Swap(&other->ipv6_addrs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  registrar_.Swap(&other->registrar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remark_.Swap(&other->remark_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(asn_, other->asn_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KnownMaliciousDomain::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain* Arena::CreateMaybeMessage< ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::hitnslab::dnssecurity::deeparcher::api::proto::KnownMaliciousDomain >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
