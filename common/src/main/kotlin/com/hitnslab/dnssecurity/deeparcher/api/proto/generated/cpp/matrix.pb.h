// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/hitnslab/dnssecurity/deeparcher/api/proto/matrix.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {
class CooMatFloat;
class CooMatFloatDefaultTypeInternal;
extern CooMatFloatDefaultTypeInternal _CooMatFloat_default_instance_;
class CooMatInt64;
class CooMatInt64DefaultTypeInternal;
extern CooMatInt64DefaultTypeInternal _CooMatInt64_default_instance_;
class CscMatFloat;
class CscMatFloatDefaultTypeInternal;
extern CscMatFloatDefaultTypeInternal _CscMatFloat_default_instance_;
class CscMatInt64;
class CscMatInt64DefaultTypeInternal;
extern CscMatInt64DefaultTypeInternal _CscMatInt64_default_instance_;
class CsrMatFloat;
class CsrMatFloatDefaultTypeInternal;
extern CsrMatFloatDefaultTypeInternal _CsrMatFloat_default_instance_;
class CsrMatInt64;
class CsrMatInt64DefaultTypeInternal;
extern CsrMatInt64DefaultTypeInternal _CsrMatInt64_default_instance_;
class DenseMatFloat;
class DenseMatFloatDefaultTypeInternal;
extern DenseMatFloatDefaultTypeInternal _DenseMatFloat_default_instance_;
class DenseMatInt64;
class DenseMatInt64DefaultTypeInternal;
extern DenseMatInt64DefaultTypeInternal _DenseMatInt64_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatFloat* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatFloat>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatInt64* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatInt64>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatFloat* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatFloat>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatInt64* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatInt64>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatFloat* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatFloat>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatInt64* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatInt64>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatFloat* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatFloat>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatInt64* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatInt64>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {

// ===================================================================

class DenseMatFloat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat) */ {
 public:
  DenseMatFloat();
  virtual ~DenseMatFloat();

  DenseMatFloat(const DenseMatFloat& from);
  DenseMatFloat(DenseMatFloat&& from) noexcept
    : DenseMatFloat() {
    *this = ::std::move(from);
  }

  inline DenseMatFloat& operator=(const DenseMatFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenseMatFloat& operator=(DenseMatFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DenseMatFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseMatFloat* internal_default_instance() {
    return reinterpret_cast<const DenseMatFloat*>(
               &_DenseMatFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DenseMatFloat& a, DenseMatFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(DenseMatFloat* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DenseMatFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DenseMatFloat* New() const final {
    return CreateMaybeMessage<DenseMatFloat>(nullptr);
  }

  DenseMatFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DenseMatFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DenseMatFloat& from);
  void MergeFrom(const DenseMatFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenseMatFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat";
  }
  protected:
  explicit DenseMatFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated float values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class CooMatFloat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat) */ {
 public:
  CooMatFloat();
  virtual ~CooMatFloat();

  CooMatFloat(const CooMatFloat& from);
  CooMatFloat(CooMatFloat&& from) noexcept
    : CooMatFloat() {
    *this = ::std::move(from);
  }

  inline CooMatFloat& operator=(const CooMatFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CooMatFloat& operator=(CooMatFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CooMatFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CooMatFloat* internal_default_instance() {
    return reinterpret_cast<const CooMatFloat*>(
               &_CooMatFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CooMatFloat& a, CooMatFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(CooMatFloat* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CooMatFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CooMatFloat* New() const final {
    return CreateMaybeMessage<CooMatFloat>(nullptr);
  }

  CooMatFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CooMatFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CooMatFloat& from);
  void MergeFrom(const CooMatFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CooMatFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat";
  }
  protected:
  explicit CooMatFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kRowsFieldNumber = 2,
    kColsFieldNumber = 3,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated uint64 rows = 2;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rows(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_rows() const;
  void _internal_add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_rows();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 rows(int index) const;
  void set_rows(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      rows() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_rows();

  // repeated uint64 cols = 3;
  int cols_size() const;
  private:
  int _internal_cols_size() const;
  public:
  void clear_cols();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cols(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_cols() const;
  void _internal_add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_cols();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 cols(int index) const;
  void set_cols(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      cols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_cols();

  // repeated float values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > rows_;
  mutable std::atomic<int> _rows_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > cols_;
  mutable std::atomic<int> _cols_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class CsrMatFloat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat) */ {
 public:
  CsrMatFloat();
  virtual ~CsrMatFloat();

  CsrMatFloat(const CsrMatFloat& from);
  CsrMatFloat(CsrMatFloat&& from) noexcept
    : CsrMatFloat() {
    *this = ::std::move(from);
  }

  inline CsrMatFloat& operator=(const CsrMatFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsrMatFloat& operator=(CsrMatFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CsrMatFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsrMatFloat* internal_default_instance() {
    return reinterpret_cast<const CsrMatFloat*>(
               &_CsrMatFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CsrMatFloat& a, CsrMatFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(CsrMatFloat* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsrMatFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsrMatFloat* New() const final {
    return CreateMaybeMessage<CsrMatFloat>(nullptr);
  }

  CsrMatFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsrMatFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsrMatFloat& from);
  void MergeFrom(const CsrMatFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsrMatFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat";
  }
  protected:
  explicit CsrMatFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kRowOffsetsFieldNumber = 2,
    kColIndicesFieldNumber = 3,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated uint64 row_offsets = 2;
  int row_offsets_size() const;
  private:
  int _internal_row_offsets_size() const;
  public:
  void clear_row_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_row_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_row_offsets() const;
  void _internal_add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_row_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 row_offsets(int index) const;
  void set_row_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      row_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_row_offsets();

  // repeated uint64 col_indices = 3;
  int col_indices_size() const;
  private:
  int _internal_col_indices_size() const;
  public:
  void clear_col_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_col_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_col_indices() const;
  void _internal_add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_col_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 col_indices(int index) const;
  void set_col_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      col_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_col_indices();

  // repeated float values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > row_offsets_;
  mutable std::atomic<int> _row_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > col_indices_;
  mutable std::atomic<int> _col_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class CscMatFloat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat) */ {
 public:
  CscMatFloat();
  virtual ~CscMatFloat();

  CscMatFloat(const CscMatFloat& from);
  CscMatFloat(CscMatFloat&& from) noexcept
    : CscMatFloat() {
    *this = ::std::move(from);
  }

  inline CscMatFloat& operator=(const CscMatFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CscMatFloat& operator=(CscMatFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CscMatFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CscMatFloat* internal_default_instance() {
    return reinterpret_cast<const CscMatFloat*>(
               &_CscMatFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CscMatFloat& a, CscMatFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(CscMatFloat* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CscMatFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CscMatFloat* New() const final {
    return CreateMaybeMessage<CscMatFloat>(nullptr);
  }

  CscMatFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CscMatFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CscMatFloat& from);
  void MergeFrom(const CscMatFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CscMatFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat";
  }
  protected:
  explicit CscMatFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kColOffsetsFieldNumber = 2,
    kRowIndicesFieldNumber = 3,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated uint64 col_offsets = 2;
  int col_offsets_size() const;
  private:
  int _internal_col_offsets_size() const;
  public:
  void clear_col_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_col_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_col_offsets() const;
  void _internal_add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_col_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 col_offsets(int index) const;
  void set_col_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      col_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_col_offsets();

  // repeated uint64 row_indices = 3;
  int row_indices_size() const;
  private:
  int _internal_row_indices_size() const;
  public:
  void clear_row_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_row_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_row_indices() const;
  void _internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_row_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 row_indices(int index) const;
  void set_row_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      row_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_row_indices();

  // repeated float values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > col_offsets_;
  mutable std::atomic<int> _col_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > row_indices_;
  mutable std::atomic<int> _row_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class DenseMatInt64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64) */ {
 public:
  DenseMatInt64();
  virtual ~DenseMatInt64();

  DenseMatInt64(const DenseMatInt64& from);
  DenseMatInt64(DenseMatInt64&& from) noexcept
    : DenseMatInt64() {
    *this = ::std::move(from);
  }

  inline DenseMatInt64& operator=(const DenseMatInt64& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenseMatInt64& operator=(DenseMatInt64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DenseMatInt64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseMatInt64* internal_default_instance() {
    return reinterpret_cast<const DenseMatInt64*>(
               &_DenseMatInt64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DenseMatInt64& a, DenseMatInt64& b) {
    a.Swap(&b);
  }
  inline void Swap(DenseMatInt64* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DenseMatInt64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DenseMatInt64* New() const final {
    return CreateMaybeMessage<DenseMatInt64>(nullptr);
  }

  DenseMatInt64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DenseMatInt64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DenseMatInt64& from);
  void MergeFrom(const DenseMatInt64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenseMatInt64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64";
  }
  protected:
  explicit DenseMatInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated int64 values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class CooMatInt64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64) */ {
 public:
  CooMatInt64();
  virtual ~CooMatInt64();

  CooMatInt64(const CooMatInt64& from);
  CooMatInt64(CooMatInt64&& from) noexcept
    : CooMatInt64() {
    *this = ::std::move(from);
  }

  inline CooMatInt64& operator=(const CooMatInt64& from) {
    CopyFrom(from);
    return *this;
  }
  inline CooMatInt64& operator=(CooMatInt64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CooMatInt64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CooMatInt64* internal_default_instance() {
    return reinterpret_cast<const CooMatInt64*>(
               &_CooMatInt64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CooMatInt64& a, CooMatInt64& b) {
    a.Swap(&b);
  }
  inline void Swap(CooMatInt64* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CooMatInt64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CooMatInt64* New() const final {
    return CreateMaybeMessage<CooMatInt64>(nullptr);
  }

  CooMatInt64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CooMatInt64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CooMatInt64& from);
  void MergeFrom(const CooMatInt64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CooMatInt64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64";
  }
  protected:
  explicit CooMatInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kRowsFieldNumber = 2,
    kColsFieldNumber = 3,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated uint64 rows = 2;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rows(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_rows() const;
  void _internal_add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_rows();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 rows(int index) const;
  void set_rows(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      rows() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_rows();

  // repeated uint64 cols = 3;
  int cols_size() const;
  private:
  int _internal_cols_size() const;
  public:
  void clear_cols();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cols(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_cols() const;
  void _internal_add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_cols();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 cols(int index) const;
  void set_cols(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      cols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_cols();

  // repeated int64 values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > rows_;
  mutable std::atomic<int> _rows_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > cols_;
  mutable std::atomic<int> _cols_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class CsrMatInt64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64) */ {
 public:
  CsrMatInt64();
  virtual ~CsrMatInt64();

  CsrMatInt64(const CsrMatInt64& from);
  CsrMatInt64(CsrMatInt64&& from) noexcept
    : CsrMatInt64() {
    *this = ::std::move(from);
  }

  inline CsrMatInt64& operator=(const CsrMatInt64& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsrMatInt64& operator=(CsrMatInt64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CsrMatInt64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsrMatInt64* internal_default_instance() {
    return reinterpret_cast<const CsrMatInt64*>(
               &_CsrMatInt64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CsrMatInt64& a, CsrMatInt64& b) {
    a.Swap(&b);
  }
  inline void Swap(CsrMatInt64* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsrMatInt64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsrMatInt64* New() const final {
    return CreateMaybeMessage<CsrMatInt64>(nullptr);
  }

  CsrMatInt64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsrMatInt64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsrMatInt64& from);
  void MergeFrom(const CsrMatInt64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsrMatInt64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64";
  }
  protected:
  explicit CsrMatInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kRowOffsetsFieldNumber = 2,
    kColIndicesFieldNumber = 3,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated uint64 row_offsets = 2;
  int row_offsets_size() const;
  private:
  int _internal_row_offsets_size() const;
  public:
  void clear_row_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_row_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_row_offsets() const;
  void _internal_add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_row_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 row_offsets(int index) const;
  void set_row_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      row_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_row_offsets();

  // repeated uint64 col_indices = 3;
  int col_indices_size() const;
  private:
  int _internal_col_indices_size() const;
  public:
  void clear_col_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_col_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_col_indices() const;
  void _internal_add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_col_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 col_indices(int index) const;
  void set_col_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      col_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_col_indices();

  // repeated int64 values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > row_offsets_;
  mutable std::atomic<int> _row_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > col_indices_;
  mutable std::atomic<int> _col_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class CscMatInt64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64) */ {
 public:
  CscMatInt64();
  virtual ~CscMatInt64();

  CscMatInt64(const CscMatInt64& from);
  CscMatInt64(CscMatInt64&& from) noexcept
    : CscMatInt64() {
    *this = ::std::move(from);
  }

  inline CscMatInt64& operator=(const CscMatInt64& from) {
    CopyFrom(from);
    return *this;
  }
  inline CscMatInt64& operator=(CscMatInt64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CscMatInt64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CscMatInt64* internal_default_instance() {
    return reinterpret_cast<const CscMatInt64*>(
               &_CscMatInt64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CscMatInt64& a, CscMatInt64& b) {
    a.Swap(&b);
  }
  inline void Swap(CscMatInt64* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CscMatInt64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CscMatInt64* New() const final {
    return CreateMaybeMessage<CscMatInt64>(nullptr);
  }

  CscMatInt64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CscMatInt64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CscMatInt64& from);
  void MergeFrom(const CscMatInt64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CscMatInt64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64";
  }
  protected:
  explicit CscMatInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kColOffsetsFieldNumber = 2,
    kRowIndicesFieldNumber = 3,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated uint64 col_offsets = 2;
  int col_offsets_size() const;
  private:
  int _internal_col_offsets_size() const;
  public:
  void clear_col_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_col_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_col_offsets() const;
  void _internal_add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_col_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 col_offsets(int index) const;
  void set_col_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      col_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_col_offsets();

  // repeated uint64 row_indices = 3;
  int row_indices_size() const;
  private:
  int _internal_row_indices_size() const;
  public:
  void clear_row_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_row_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_row_indices() const;
  void _internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_row_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 row_indices(int index) const;
  void set_row_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      row_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_row_indices();

  // repeated int64 values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > col_offsets_;
  mutable std::atomic<int> _col_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > row_indices_;
  mutable std::atomic<int> _row_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DenseMatFloat

// repeated uint64 dims = 1;
inline int DenseMatFloat::_internal_dims_size() const {
  return dims_.size();
}
inline int DenseMatFloat::dims_size() const {
  return _internal_dims_size();
}
inline void DenseMatFloat::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DenseMatFloat::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DenseMatFloat::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat.dims)
  return _internal_dims(index);
}
inline void DenseMatFloat::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat.dims)
}
inline void DenseMatFloat::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void DenseMatFloat::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
DenseMatFloat::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
DenseMatFloat::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
DenseMatFloat::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
DenseMatFloat::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat.dims)
  return _internal_mutable_dims();
}

// repeated float values = 10;
inline int DenseMatFloat::_internal_values_size() const {
  return values_.size();
}
inline int DenseMatFloat::values_size() const {
  return _internal_values_size();
}
inline void DenseMatFloat::clear_values() {
  values_.Clear();
}
inline float DenseMatFloat::_internal_values(int index) const {
  return values_.Get(index);
}
inline float DenseMatFloat::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat.values)
  return _internal_values(index);
}
inline void DenseMatFloat::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat.values)
}
inline void DenseMatFloat::_internal_add_values(float value) {
  values_.Add(value);
}
inline void DenseMatFloat::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DenseMatFloat::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DenseMatFloat::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DenseMatFloat::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DenseMatFloat::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CooMatFloat

// repeated uint64 dims = 1;
inline int CooMatFloat::_internal_dims_size() const {
  return dims_.size();
}
inline int CooMatFloat::dims_size() const {
  return _internal_dims_size();
}
inline void CooMatFloat::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatFloat::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatFloat::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.dims)
  return _internal_dims(index);
}
inline void CooMatFloat::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.dims)
}
inline void CooMatFloat::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void CooMatFloat::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatFloat::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatFloat::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatFloat::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatFloat::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.dims)
  return _internal_mutable_dims();
}

// repeated uint64 rows = 2;
inline int CooMatFloat::_internal_rows_size() const {
  return rows_.size();
}
inline int CooMatFloat::rows_size() const {
  return _internal_rows_size();
}
inline void CooMatFloat::clear_rows() {
  rows_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatFloat::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatFloat::rows(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.rows)
  return _internal_rows(index);
}
inline void CooMatFloat::set_rows(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rows_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.rows)
}
inline void CooMatFloat::_internal_add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rows_.Add(value);
}
inline void CooMatFloat::add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_rows(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.rows)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatFloat::_internal_rows() const {
  return rows_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatFloat::rows() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.rows)
  return _internal_rows();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatFloat::_internal_mutable_rows() {
  return &rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatFloat::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.rows)
  return _internal_mutable_rows();
}

// repeated uint64 cols = 3;
inline int CooMatFloat::_internal_cols_size() const {
  return cols_.size();
}
inline int CooMatFloat::cols_size() const {
  return _internal_cols_size();
}
inline void CooMatFloat::clear_cols() {
  cols_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatFloat::_internal_cols(int index) const {
  return cols_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatFloat::cols(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.cols)
  return _internal_cols(index);
}
inline void CooMatFloat::set_cols(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  cols_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.cols)
}
inline void CooMatFloat::_internal_add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  cols_.Add(value);
}
inline void CooMatFloat::add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_cols(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.cols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatFloat::_internal_cols() const {
  return cols_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatFloat::cols() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.cols)
  return _internal_cols();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatFloat::_internal_mutable_cols() {
  return &cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatFloat::mutable_cols() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.cols)
  return _internal_mutable_cols();
}

// repeated float values = 10;
inline int CooMatFloat::_internal_values_size() const {
  return values_.size();
}
inline int CooMatFloat::values_size() const {
  return _internal_values_size();
}
inline void CooMatFloat::clear_values() {
  values_.Clear();
}
inline float CooMatFloat::_internal_values(int index) const {
  return values_.Get(index);
}
inline float CooMatFloat::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.values)
  return _internal_values(index);
}
inline void CooMatFloat::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.values)
}
inline void CooMatFloat::_internal_add_values(float value) {
  values_.Add(value);
}
inline void CooMatFloat::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CooMatFloat::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CooMatFloat::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CooMatFloat::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CooMatFloat::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CsrMatFloat

// repeated uint64 dims = 1;
inline int CsrMatFloat::_internal_dims_size() const {
  return dims_.size();
}
inline int CsrMatFloat::dims_size() const {
  return _internal_dims_size();
}
inline void CsrMatFloat::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatFloat::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatFloat::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.dims)
  return _internal_dims(index);
}
inline void CsrMatFloat::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.dims)
}
inline void CsrMatFloat::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void CsrMatFloat::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatFloat::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatFloat::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatFloat::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatFloat::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.dims)
  return _internal_mutable_dims();
}

// repeated uint64 row_offsets = 2;
inline int CsrMatFloat::_internal_row_offsets_size() const {
  return row_offsets_.size();
}
inline int CsrMatFloat::row_offsets_size() const {
  return _internal_row_offsets_size();
}
inline void CsrMatFloat::clear_row_offsets() {
  row_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatFloat::_internal_row_offsets(int index) const {
  return row_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatFloat::row_offsets(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.row_offsets)
  return _internal_row_offsets(index);
}
inline void CsrMatFloat::set_row_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.row_offsets)
}
inline void CsrMatFloat::_internal_add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_offsets_.Add(value);
}
inline void CsrMatFloat::add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_row_offsets(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.row_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatFloat::_internal_row_offsets() const {
  return row_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatFloat::row_offsets() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.row_offsets)
  return _internal_row_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatFloat::_internal_mutable_row_offsets() {
  return &row_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatFloat::mutable_row_offsets() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.row_offsets)
  return _internal_mutable_row_offsets();
}

// repeated uint64 col_indices = 3;
inline int CsrMatFloat::_internal_col_indices_size() const {
  return col_indices_.size();
}
inline int CsrMatFloat::col_indices_size() const {
  return _internal_col_indices_size();
}
inline void CsrMatFloat::clear_col_indices() {
  col_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatFloat::_internal_col_indices(int index) const {
  return col_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatFloat::col_indices(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.col_indices)
  return _internal_col_indices(index);
}
inline void CsrMatFloat::set_col_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.col_indices)
}
inline void CsrMatFloat::_internal_add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_indices_.Add(value);
}
inline void CsrMatFloat::add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_col_indices(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.col_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatFloat::_internal_col_indices() const {
  return col_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatFloat::col_indices() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.col_indices)
  return _internal_col_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatFloat::_internal_mutable_col_indices() {
  return &col_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatFloat::mutable_col_indices() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.col_indices)
  return _internal_mutable_col_indices();
}

// repeated float values = 10;
inline int CsrMatFloat::_internal_values_size() const {
  return values_.size();
}
inline int CsrMatFloat::values_size() const {
  return _internal_values_size();
}
inline void CsrMatFloat::clear_values() {
  values_.Clear();
}
inline float CsrMatFloat::_internal_values(int index) const {
  return values_.Get(index);
}
inline float CsrMatFloat::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.values)
  return _internal_values(index);
}
inline void CsrMatFloat::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.values)
}
inline void CsrMatFloat::_internal_add_values(float value) {
  values_.Add(value);
}
inline void CsrMatFloat::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CsrMatFloat::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CsrMatFloat::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CsrMatFloat::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CsrMatFloat::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CscMatFloat

// repeated uint64 dims = 1;
inline int CscMatFloat::_internal_dims_size() const {
  return dims_.size();
}
inline int CscMatFloat::dims_size() const {
  return _internal_dims_size();
}
inline void CscMatFloat::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatFloat::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatFloat::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.dims)
  return _internal_dims(index);
}
inline void CscMatFloat::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.dims)
}
inline void CscMatFloat::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void CscMatFloat::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatFloat::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatFloat::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatFloat::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatFloat::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.dims)
  return _internal_mutable_dims();
}

// repeated uint64 col_offsets = 2;
inline int CscMatFloat::_internal_col_offsets_size() const {
  return col_offsets_.size();
}
inline int CscMatFloat::col_offsets_size() const {
  return _internal_col_offsets_size();
}
inline void CscMatFloat::clear_col_offsets() {
  col_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatFloat::_internal_col_offsets(int index) const {
  return col_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatFloat::col_offsets(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.col_offsets)
  return _internal_col_offsets(index);
}
inline void CscMatFloat::set_col_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.col_offsets)
}
inline void CscMatFloat::_internal_add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_offsets_.Add(value);
}
inline void CscMatFloat::add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_col_offsets(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.col_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatFloat::_internal_col_offsets() const {
  return col_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatFloat::col_offsets() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.col_offsets)
  return _internal_col_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatFloat::_internal_mutable_col_offsets() {
  return &col_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatFloat::mutable_col_offsets() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.col_offsets)
  return _internal_mutable_col_offsets();
}

// repeated uint64 row_indices = 3;
inline int CscMatFloat::_internal_row_indices_size() const {
  return row_indices_.size();
}
inline int CscMatFloat::row_indices_size() const {
  return _internal_row_indices_size();
}
inline void CscMatFloat::clear_row_indices() {
  row_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatFloat::_internal_row_indices(int index) const {
  return row_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatFloat::row_indices(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.row_indices)
  return _internal_row_indices(index);
}
inline void CscMatFloat::set_row_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.row_indices)
}
inline void CscMatFloat::_internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_indices_.Add(value);
}
inline void CscMatFloat::add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_row_indices(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.row_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatFloat::_internal_row_indices() const {
  return row_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatFloat::row_indices() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.row_indices)
  return _internal_row_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatFloat::_internal_mutable_row_indices() {
  return &row_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatFloat::mutable_row_indices() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.row_indices)
  return _internal_mutable_row_indices();
}

// repeated float values = 10;
inline int CscMatFloat::_internal_values_size() const {
  return values_.size();
}
inline int CscMatFloat::values_size() const {
  return _internal_values_size();
}
inline void CscMatFloat::clear_values() {
  values_.Clear();
}
inline float CscMatFloat::_internal_values(int index) const {
  return values_.Get(index);
}
inline float CscMatFloat::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.values)
  return _internal_values(index);
}
inline void CscMatFloat::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.values)
}
inline void CscMatFloat::_internal_add_values(float value) {
  values_.Add(value);
}
inline void CscMatFloat::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CscMatFloat::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CscMatFloat::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CscMatFloat::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CscMatFloat::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// DenseMatInt64

// repeated uint64 dims = 1;
inline int DenseMatInt64::_internal_dims_size() const {
  return dims_.size();
}
inline int DenseMatInt64::dims_size() const {
  return _internal_dims_size();
}
inline void DenseMatInt64::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DenseMatInt64::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DenseMatInt64::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64.dims)
  return _internal_dims(index);
}
inline void DenseMatInt64::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64.dims)
}
inline void DenseMatInt64::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void DenseMatInt64::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
DenseMatInt64::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
DenseMatInt64::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
DenseMatInt64::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
DenseMatInt64::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64.dims)
  return _internal_mutable_dims();
}

// repeated int64 values = 10;
inline int DenseMatInt64::_internal_values_size() const {
  return values_.size();
}
inline int DenseMatInt64::values_size() const {
  return _internal_values_size();
}
inline void DenseMatInt64::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DenseMatInt64::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DenseMatInt64::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64.values)
  return _internal_values(index);
}
inline void DenseMatInt64::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64.values)
}
inline void DenseMatInt64::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Add(value);
}
inline void DenseMatInt64::add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DenseMatInt64::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DenseMatInt64::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DenseMatInt64::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DenseMatInt64::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatInt64.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CooMatInt64

// repeated uint64 dims = 1;
inline int CooMatInt64::_internal_dims_size() const {
  return dims_.size();
}
inline int CooMatInt64::dims_size() const {
  return _internal_dims_size();
}
inline void CooMatInt64::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatInt64::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatInt64::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.dims)
  return _internal_dims(index);
}
inline void CooMatInt64::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.dims)
}
inline void CooMatInt64::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void CooMatInt64::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatInt64::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatInt64::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatInt64::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatInt64::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.dims)
  return _internal_mutable_dims();
}

// repeated uint64 rows = 2;
inline int CooMatInt64::_internal_rows_size() const {
  return rows_.size();
}
inline int CooMatInt64::rows_size() const {
  return _internal_rows_size();
}
inline void CooMatInt64::clear_rows() {
  rows_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatInt64::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatInt64::rows(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.rows)
  return _internal_rows(index);
}
inline void CooMatInt64::set_rows(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rows_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.rows)
}
inline void CooMatInt64::_internal_add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rows_.Add(value);
}
inline void CooMatInt64::add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_rows(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.rows)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatInt64::_internal_rows() const {
  return rows_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatInt64::rows() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.rows)
  return _internal_rows();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatInt64::_internal_mutable_rows() {
  return &rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatInt64::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.rows)
  return _internal_mutable_rows();
}

// repeated uint64 cols = 3;
inline int CooMatInt64::_internal_cols_size() const {
  return cols_.size();
}
inline int CooMatInt64::cols_size() const {
  return _internal_cols_size();
}
inline void CooMatInt64::clear_cols() {
  cols_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatInt64::_internal_cols(int index) const {
  return cols_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMatInt64::cols(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.cols)
  return _internal_cols(index);
}
inline void CooMatInt64::set_cols(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  cols_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.cols)
}
inline void CooMatInt64::_internal_add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  cols_.Add(value);
}
inline void CooMatInt64::add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_cols(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.cols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatInt64::_internal_cols() const {
  return cols_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMatInt64::cols() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.cols)
  return _internal_cols();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatInt64::_internal_mutable_cols() {
  return &cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMatInt64::mutable_cols() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.cols)
  return _internal_mutable_cols();
}

// repeated int64 values = 10;
inline int CooMatInt64::_internal_values_size() const {
  return values_.size();
}
inline int CooMatInt64::values_size() const {
  return _internal_values_size();
}
inline void CooMatInt64::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CooMatInt64::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CooMatInt64::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.values)
  return _internal_values(index);
}
inline void CooMatInt64::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.values)
}
inline void CooMatInt64::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Add(value);
}
inline void CooMatInt64::add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CooMatInt64::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CooMatInt64::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CooMatInt64::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CooMatInt64::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatInt64.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CsrMatInt64

// repeated uint64 dims = 1;
inline int CsrMatInt64::_internal_dims_size() const {
  return dims_.size();
}
inline int CsrMatInt64::dims_size() const {
  return _internal_dims_size();
}
inline void CsrMatInt64::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatInt64::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatInt64::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.dims)
  return _internal_dims(index);
}
inline void CsrMatInt64::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.dims)
}
inline void CsrMatInt64::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void CsrMatInt64::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatInt64::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatInt64::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatInt64::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatInt64::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.dims)
  return _internal_mutable_dims();
}

// repeated uint64 row_offsets = 2;
inline int CsrMatInt64::_internal_row_offsets_size() const {
  return row_offsets_.size();
}
inline int CsrMatInt64::row_offsets_size() const {
  return _internal_row_offsets_size();
}
inline void CsrMatInt64::clear_row_offsets() {
  row_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatInt64::_internal_row_offsets(int index) const {
  return row_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatInt64::row_offsets(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.row_offsets)
  return _internal_row_offsets(index);
}
inline void CsrMatInt64::set_row_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.row_offsets)
}
inline void CsrMatInt64::_internal_add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_offsets_.Add(value);
}
inline void CsrMatInt64::add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_row_offsets(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.row_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatInt64::_internal_row_offsets() const {
  return row_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatInt64::row_offsets() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.row_offsets)
  return _internal_row_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatInt64::_internal_mutable_row_offsets() {
  return &row_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatInt64::mutable_row_offsets() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.row_offsets)
  return _internal_mutable_row_offsets();
}

// repeated uint64 col_indices = 3;
inline int CsrMatInt64::_internal_col_indices_size() const {
  return col_indices_.size();
}
inline int CsrMatInt64::col_indices_size() const {
  return _internal_col_indices_size();
}
inline void CsrMatInt64::clear_col_indices() {
  col_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatInt64::_internal_col_indices(int index) const {
  return col_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMatInt64::col_indices(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.col_indices)
  return _internal_col_indices(index);
}
inline void CsrMatInt64::set_col_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.col_indices)
}
inline void CsrMatInt64::_internal_add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_indices_.Add(value);
}
inline void CsrMatInt64::add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_col_indices(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.col_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatInt64::_internal_col_indices() const {
  return col_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMatInt64::col_indices() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.col_indices)
  return _internal_col_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatInt64::_internal_mutable_col_indices() {
  return &col_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMatInt64::mutable_col_indices() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.col_indices)
  return _internal_mutable_col_indices();
}

// repeated int64 values = 10;
inline int CsrMatInt64::_internal_values_size() const {
  return values_.size();
}
inline int CsrMatInt64::values_size() const {
  return _internal_values_size();
}
inline void CsrMatInt64::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CsrMatInt64::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CsrMatInt64::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.values)
  return _internal_values(index);
}
inline void CsrMatInt64::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.values)
}
inline void CsrMatInt64::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Add(value);
}
inline void CsrMatInt64::add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CsrMatInt64::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CsrMatInt64::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CsrMatInt64::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CsrMatInt64::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatInt64.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CscMatInt64

// repeated uint64 dims = 1;
inline int CscMatInt64::_internal_dims_size() const {
  return dims_.size();
}
inline int CscMatInt64::dims_size() const {
  return _internal_dims_size();
}
inline void CscMatInt64::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatInt64::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatInt64::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.dims)
  return _internal_dims(index);
}
inline void CscMatInt64::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.dims)
}
inline void CscMatInt64::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void CscMatInt64::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatInt64::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatInt64::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatInt64::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatInt64::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.dims)
  return _internal_mutable_dims();
}

// repeated uint64 col_offsets = 2;
inline int CscMatInt64::_internal_col_offsets_size() const {
  return col_offsets_.size();
}
inline int CscMatInt64::col_offsets_size() const {
  return _internal_col_offsets_size();
}
inline void CscMatInt64::clear_col_offsets() {
  col_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatInt64::_internal_col_offsets(int index) const {
  return col_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatInt64::col_offsets(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.col_offsets)
  return _internal_col_offsets(index);
}
inline void CscMatInt64::set_col_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.col_offsets)
}
inline void CscMatInt64::_internal_add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_offsets_.Add(value);
}
inline void CscMatInt64::add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_col_offsets(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.col_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatInt64::_internal_col_offsets() const {
  return col_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatInt64::col_offsets() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.col_offsets)
  return _internal_col_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatInt64::_internal_mutable_col_offsets() {
  return &col_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatInt64::mutable_col_offsets() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.col_offsets)
  return _internal_mutable_col_offsets();
}

// repeated uint64 row_indices = 3;
inline int CscMatInt64::_internal_row_indices_size() const {
  return row_indices_.size();
}
inline int CscMatInt64::row_indices_size() const {
  return _internal_row_indices_size();
}
inline void CscMatInt64::clear_row_indices() {
  row_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatInt64::_internal_row_indices(int index) const {
  return row_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMatInt64::row_indices(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.row_indices)
  return _internal_row_indices(index);
}
inline void CscMatInt64::set_row_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.row_indices)
}
inline void CscMatInt64::_internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_indices_.Add(value);
}
inline void CscMatInt64::add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_row_indices(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.row_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatInt64::_internal_row_indices() const {
  return row_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMatInt64::row_indices() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.row_indices)
  return _internal_row_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatInt64::_internal_mutable_row_indices() {
  return &row_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMatInt64::mutable_row_indices() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.row_indices)
  return _internal_mutable_row_indices();
}

// repeated int64 values = 10;
inline int CscMatInt64::_internal_values_size() const {
  return values_.size();
}
inline int CscMatInt64::values_size() const {
  return _internal_values_size();
}
inline void CscMatInt64::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CscMatInt64::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CscMatInt64::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.values)
  return _internal_values(index);
}
inline void CscMatInt64::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.values)
}
inline void CscMatInt64::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  values_.Add(value);
}
inline void CscMatInt64::add_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CscMatInt64::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CscMatInt64::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CscMatInt64::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CscMatInt64::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatInt64.values)
  return _internal_mutable_values();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto
