// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/hitnslab/dnssecurity/deeparcher/api/proto/graph_assoc_edge_update.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto;
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {
class GraphAssocEdgeUpdate;
class GraphAssocEdgeUpdateDefaultTypeInternal;
extern GraphAssocEdgeUpdateDefaultTypeInternal _GraphAssocEdgeUpdate_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphAssocEdgeUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {

// ===================================================================

class GraphAssocEdgeUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate) */ {
 public:
  inline GraphAssocEdgeUpdate() : GraphAssocEdgeUpdate(nullptr) {};
  virtual ~GraphAssocEdgeUpdate();

  GraphAssocEdgeUpdate(const GraphAssocEdgeUpdate& from);
  GraphAssocEdgeUpdate(GraphAssocEdgeUpdate&& from) noexcept
    : GraphAssocEdgeUpdate() {
    *this = ::std::move(from);
  }

  inline GraphAssocEdgeUpdate& operator=(const GraphAssocEdgeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphAssocEdgeUpdate& operator=(GraphAssocEdgeUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphAssocEdgeUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphAssocEdgeUpdate* internal_default_instance() {
    return reinterpret_cast<const GraphAssocEdgeUpdate*>(
               &_GraphAssocEdgeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphAssocEdgeUpdate& a, GraphAssocEdgeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphAssocEdgeUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphAssocEdgeUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphAssocEdgeUpdate* New() const final {
    return CreateMaybeMessage<GraphAssocEdgeUpdate>(nullptr);
  }

  GraphAssocEdgeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphAssocEdgeUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphAssocEdgeUpdate& from);
  void MergeFrom(const GraphAssocEdgeUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphAssocEdgeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate";
  }
  protected:
  explicit GraphAssocEdgeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFqdn1FieldNumber = 1,
    kFqdn2FieldNumber = 2,
    kNSharedFieldsFieldNumber = 3,
  };
  // string fqdn1 = 1;
  void clear_fqdn1();
  const std::string& fqdn1() const;
  void set_fqdn1(const std::string& value);
  void set_fqdn1(std::string&& value);
  void set_fqdn1(const char* value);
  void set_fqdn1(const char* value, size_t size);
  std::string* mutable_fqdn1();
  std::string* release_fqdn1();
  void set_allocated_fqdn1(std::string* fqdn1);
  private:
  const std::string& _internal_fqdn1() const;
  void _internal_set_fqdn1(const std::string& value);
  std::string* _internal_mutable_fqdn1();
  public:

  // string fqdn2 = 2;
  void clear_fqdn2();
  const std::string& fqdn2() const;
  void set_fqdn2(const std::string& value);
  void set_fqdn2(std::string&& value);
  void set_fqdn2(const char* value);
  void set_fqdn2(const char* value, size_t size);
  std::string* mutable_fqdn2();
  std::string* release_fqdn2();
  void set_allocated_fqdn2(std::string* fqdn2);
  private:
  const std::string& _internal_fqdn2() const;
  void _internal_set_fqdn2(const std::string& value);
  std::string* _internal_mutable_fqdn2();
  public:

  // int32 n_shared_fields = 3;
  void clear_n_shared_fields();
  ::PROTOBUF_NAMESPACE_ID::int32 n_shared_fields() const;
  void set_n_shared_fields(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n_shared_fields() const;
  void _internal_set_n_shared_fields(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fqdn1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fqdn2_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_shared_fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphAssocEdgeUpdate

// string fqdn1 = 1;
inline void GraphAssocEdgeUpdate::clear_fqdn1() {
  fqdn1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphAssocEdgeUpdate::fqdn1() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn1)
  return _internal_fqdn1();
}
inline void GraphAssocEdgeUpdate::set_fqdn1(const std::string& value) {
  _internal_set_fqdn1(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn1)
}
inline std::string* GraphAssocEdgeUpdate::mutable_fqdn1() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn1)
  return _internal_mutable_fqdn1();
}
inline const std::string& GraphAssocEdgeUpdate::_internal_fqdn1() const {
  return fqdn1_.Get();
}
inline void GraphAssocEdgeUpdate::_internal_set_fqdn1(const std::string& value) {
  
  fqdn1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphAssocEdgeUpdate::set_fqdn1(std::string&& value) {
  
  fqdn1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn1)
}
inline void GraphAssocEdgeUpdate::set_fqdn1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fqdn1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn1)
}
inline void GraphAssocEdgeUpdate::set_fqdn1(const char* value,
    size_t size) {
  
  fqdn1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn1)
}
inline std::string* GraphAssocEdgeUpdate::_internal_mutable_fqdn1() {
  
  return fqdn1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphAssocEdgeUpdate::release_fqdn1() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn1)
  return fqdn1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphAssocEdgeUpdate::set_allocated_fqdn1(std::string* fqdn1) {
  if (fqdn1 != nullptr) {
    
  } else {
    
  }
  fqdn1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fqdn1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn1)
}

// string fqdn2 = 2;
inline void GraphAssocEdgeUpdate::clear_fqdn2() {
  fqdn2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphAssocEdgeUpdate::fqdn2() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn2)
  return _internal_fqdn2();
}
inline void GraphAssocEdgeUpdate::set_fqdn2(const std::string& value) {
  _internal_set_fqdn2(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn2)
}
inline std::string* GraphAssocEdgeUpdate::mutable_fqdn2() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn2)
  return _internal_mutable_fqdn2();
}
inline const std::string& GraphAssocEdgeUpdate::_internal_fqdn2() const {
  return fqdn2_.Get();
}
inline void GraphAssocEdgeUpdate::_internal_set_fqdn2(const std::string& value) {
  
  fqdn2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphAssocEdgeUpdate::set_fqdn2(std::string&& value) {
  
  fqdn2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn2)
}
inline void GraphAssocEdgeUpdate::set_fqdn2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fqdn2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn2)
}
inline void GraphAssocEdgeUpdate::set_fqdn2(const char* value,
    size_t size) {
  
  fqdn2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn2)
}
inline std::string* GraphAssocEdgeUpdate::_internal_mutable_fqdn2() {
  
  return fqdn2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphAssocEdgeUpdate::release_fqdn2() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn2)
  return fqdn2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphAssocEdgeUpdate::set_allocated_fqdn2(std::string* fqdn2) {
  if (fqdn2 != nullptr) {
    
  } else {
    
  }
  fqdn2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fqdn2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.fqdn2)
}

// int32 n_shared_fields = 3;
inline void GraphAssocEdgeUpdate::clear_n_shared_fields() {
  n_shared_fields_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphAssocEdgeUpdate::_internal_n_shared_fields() const {
  return n_shared_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphAssocEdgeUpdate::n_shared_fields() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.n_shared_fields)
  return _internal_n_shared_fields();
}
inline void GraphAssocEdgeUpdate::_internal_set_n_shared_fields(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_shared_fields_ = value;
}
inline void GraphAssocEdgeUpdate::set_n_shared_fields(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n_shared_fields(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.GraphAssocEdgeUpdate.n_shared_fields)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_5fassoc_5fedge_5fupdate_2eproto
