// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/hitnslab/dnssecurity/deeparcher/api/proto/graph.proto

#include "com/hitnslab/dnssecurity/deeparcher/api/proto/graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CooMatFloat_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CscMatFloat_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CsrMatFloat_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DenseMatFloat_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {
class GraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Graph> _instance;
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatFloat* dense_;
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatFloat* coo_;
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatFloat* csr_;
  const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatFloat* csc_;
} _Graph_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
static void InitDefaultsscc_info_Graph_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::hitnslab::dnssecurity::deeparcher::api::proto::_Graph_default_instance_;
    new (ptr) ::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Graph_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Graph_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto}, {
      &scc_info_DenseMatFloat_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.base,
      &scc_info_CooMatFloat_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.base,
      &scc_info_CsrMatFloat_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.base,
      &scc_info_CscMatFloat_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, id_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, nodes_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, edges_),
  offsetof(::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphDefaultTypeInternal, dense_),
  offsetof(::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphDefaultTypeInternal, coo_),
  offsetof(::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphDefaultTypeInternal, csr_),
  offsetof(::com::hitnslab::dnssecurity::deeparcher::api::proto::GraphDefaultTypeInternal, csc_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, directed_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, connected_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, unweighted_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, node_id_remap_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, attributes_),
  PROTOBUF_FIELD_OFFSET(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph, adj_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::hitnslab::dnssecurity::deeparcher::api::proto::_Graph_default_instance_),
};

const char descriptor_table_protodef_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9com/hitnslab/dnssecurity/deeparcher/ap"
  "i/proto/graph.proto\022-com.hitnslab.dnssec"
  "urity.deeparcher.api.proto\032:com/hitnslab"
  "/dnssecurity/deeparcher/api/proto/matrix"
  ".proto\032\031google/protobuf/any.proto\"\342\003\n\005Gr"
  "aph\022\n\n\002id\030\001 \001(\003\022\r\n\005nodes\030\002 \001(\003\022\r\n\005edges\030"
  "\003 \001(\003\022M\n\005dense\030\n \001(\0132<.com.hitnslab.dnss"
  "ecurity.deeparcher.api.proto.DenseMatFlo"
  "atH\000\022I\n\003coo\030\013 \001(\0132:.com.hitnslab.dnssecu"
  "rity.deeparcher.api.proto.CooMatFloatH\000\022"
  "I\n\003csr\030\014 \001(\0132:.com.hitnslab.dnssecurity."
  "deeparcher.api.proto.CsrMatFloatH\000\022I\n\003cs"
  "c\030\r \001(\0132:.com.hitnslab.dnssecurity.deepa"
  "rcher.api.proto.CscMatFloatH\000\022\020\n\010directe"
  "d\030\020 \001(\010\022\021\n\tconnected\030\021 \001(\010\022\022\n\nunweighted"
  "\030\022 \001(\010\022\025\n\rnode_id_remap\030\023 \003(\004\022(\n\nattribu"
  "tes\030  \003(\0132\024.google.protobuf.AnyB\005\n\003adjBO"
  "\n<com.hitnslab.dnssecurity.deeparcher.ap"
  "i.proto.generated.javaB\nGraphProtoH\001\370\001\001b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto_deps[2] = {
  &::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto_sccs[1] = {
  &scc_info_Graph_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto_once;
static bool descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto = {
  &descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto_initialized, descriptor_table_protodef_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto, "com/hitnslab/dnssecurity/deeparcher/api/proto/graph.proto", 767,
  &descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto_once, descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto_sccs, descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto::offsets,
  file_level_metadata_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto, 1, file_level_enum_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto, file_level_service_descriptors_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto), true);
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {

// ===================================================================

void Graph::InitAsDefaultInstance() {
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::_Graph_default_instance_.dense_ = const_cast< ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatFloat*>(
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatFloat::internal_default_instance());
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::_Graph_default_instance_.coo_ = const_cast< ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatFloat*>(
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatFloat::internal_default_instance());
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::_Graph_default_instance_.csr_ = const_cast< ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatFloat*>(
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatFloat::internal_default_instance());
  ::com::hitnslab::dnssecurity::deeparcher::api::proto::_Graph_default_instance_.csc_ = const_cast< ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatFloat*>(
      ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatFloat::internal_default_instance());
}
class Graph::_Internal {
 public:
  static const ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatFloat& dense(const Graph* msg);
  static const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatFloat& coo(const Graph* msg);
  static const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatFloat& csr(const Graph* msg);
  static const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatFloat& csc(const Graph* msg);
};

const ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatFloat&
Graph::_Internal::dense(const Graph* msg) {
  return *msg->adj_.dense_;
}
const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatFloat&
Graph::_Internal::coo(const Graph* msg) {
  return *msg->adj_.coo_;
}
const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatFloat&
Graph::_Internal::csr(const Graph* msg) {
  return *msg->adj_.csr_;
}
const ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatFloat&
Graph::_Internal::csc(const Graph* msg) {
  return *msg->adj_.csc_;
}
void Graph::set_allocated_dense(::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatFloat* dense) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_adj();
  if (dense) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dense)->GetArena();
    if (message_arena != submessage_arena) {
      dense = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dense, submessage_arena);
    }
    set_has_dense();
    adj_.dense_ = dense;
  }
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.dense)
}
void Graph::clear_dense() {
  if (_internal_has_dense()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete adj_.dense_;
    }
    clear_has_adj();
  }
}
void Graph::set_allocated_coo(::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatFloat* coo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_adj();
  if (coo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coo)->GetArena();
    if (message_arena != submessage_arena) {
      coo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coo, submessage_arena);
    }
    set_has_coo();
    adj_.coo_ = coo;
  }
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.coo)
}
void Graph::clear_coo() {
  if (_internal_has_coo()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete adj_.coo_;
    }
    clear_has_adj();
  }
}
void Graph::set_allocated_csr(::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatFloat* csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_adj();
  if (csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(csr)->GetArena();
    if (message_arena != submessage_arena) {
      csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csr, submessage_arena);
    }
    set_has_csr();
    adj_.csr_ = csr;
  }
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csr)
}
void Graph::clear_csr() {
  if (_internal_has_csr()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete adj_.csr_;
    }
    clear_has_adj();
  }
}
void Graph::set_allocated_csc(::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatFloat* csc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_adj();
  if (csc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(csc)->GetArena();
    if (message_arena != submessage_arena) {
      csc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csc, submessage_arena);
    }
    set_has_csc();
    adj_.csc_ = csc;
  }
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph.csc)
}
void Graph::clear_csc() {
  if (_internal_has_csc()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete adj_.csc_;
    }
    clear_has_adj();
  }
}
void Graph::clear_attributes() {
  attributes_.Clear();
}
Graph::Graph()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
}
Graph::Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  node_id_remap_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      node_id_remap_(from.node_id_remap_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unweighted_) -
    reinterpret_cast<char*>(&id_)) + sizeof(unweighted_));
  clear_has_adj();
  switch (from.adj_case()) {
    case kDense: {
      _internal_mutable_dense()->::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatFloat::MergeFrom(from._internal_dense());
      break;
    }
    case kCoo: {
      _internal_mutable_coo()->::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatFloat::MergeFrom(from._internal_coo());
      break;
    }
    case kCsr: {
      _internal_mutable_csr()->::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatFloat::MergeFrom(from._internal_csr());
      break;
    }
    case kCsc: {
      _internal_mutable_csc()->::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatFloat::MergeFrom(from._internal_csc());
      break;
    }
    case ADJ_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
}

void Graph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Graph_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unweighted_) -
      reinterpret_cast<char*>(&id_)) + sizeof(unweighted_));
  clear_has_adj();
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_adj()) {
    clear_adj();
  }
}

void Graph::ArenaDtor(void* object) {
  Graph* _this = reinterpret_cast< Graph* >(object);
  (void)_this;
}
void Graph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Graph& Graph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Graph_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fgraph_2eproto.base);
  return *internal_default_instance();
}


void Graph::clear_adj() {
// @@protoc_insertion_point(one_of_clear_start:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
  switch (adj_case()) {
    case kDense: {
      if (GetArenaNoVirtual() == nullptr) {
        delete adj_.dense_;
      }
      break;
    }
    case kCoo: {
      if (GetArenaNoVirtual() == nullptr) {
        delete adj_.coo_;
      }
      break;
    }
    case kCsr: {
      if (GetArenaNoVirtual() == nullptr) {
        delete adj_.csr_;
      }
      break;
    }
    case kCsc: {
      if (GetArenaNoVirtual() == nullptr) {
        delete adj_.csc_;
      }
      break;
    }
    case ADJ_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADJ_NOT_SET;
}


void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_remap_.Clear();
  attributes_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unweighted_) -
      reinterpret_cast<char*>(&id_)) + sizeof(unweighted_));
  clear_adj();
  _internal_metadata_.Clear();
}

const char* Graph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 edges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          edges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dense(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_coo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_csc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool directed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          directed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool connected = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unweighted = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          unweighted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 node_id_remap = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_node_id_remap(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          _internal_add_node_id_remap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any attributes = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Graph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 nodes = 2;
  if (this->nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_nodes(), target);
  }

  // int64 edges = 3;
  if (this->edges() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_edges(), target);
  }

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;
  if (_internal_has_dense()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::dense(this), target, stream);
  }

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;
  if (_internal_has_coo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::coo(this), target, stream);
  }

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;
  if (_internal_has_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::csr(this), target, stream);
  }

  // .com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;
  if (_internal_has_csc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::csc(this), target, stream);
  }

  // bool directed = 16;
  if (this->directed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_directed(), target);
  }

  // bool connected = 17;
  if (this->connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_connected(), target);
  }

  // bool unweighted = 18;
  if (this->unweighted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_unweighted(), target);
  }

  // repeated uint64 node_id_remap = 19;
  {
    int byte_size = _node_id_remap_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          19, _internal_node_id_remap(), byte_size, target);
    }
  }

  // repeated .google.protobuf.Any attributes = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_attributes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 node_id_remap = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->node_id_remap_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _node_id_remap_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.protobuf.Any attributes = 32;
  total_size += 2UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 nodes = 2;
  if (this->nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_nodes());
  }

  // int64 edges = 3;
  if (this->edges() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_edges());
  }

  // bool directed = 16;
  if (this->directed() != 0) {
    total_size += 2 + 1;
  }

  // bool connected = 17;
  if (this->connected() != 0) {
    total_size += 2 + 1;
  }

  // bool unweighted = 18;
  if (this->unweighted() != 0) {
    total_size += 2 + 1;
  }

  switch (adj_case()) {
    // .com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMatFloat dense = 10;
    case kDense: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adj_.dense_);
      break;
    }
    // .com.hitnslab.dnssecurity.deeparcher.api.proto.CooMatFloat coo = 11;
    case kCoo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adj_.coo_);
      break;
    }
    // .com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMatFloat csr = 12;
    case kCsr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adj_.csr_);
      break;
    }
    // .com.hitnslab.dnssecurity.deeparcher.api.proto.CscMatFloat csc = 13;
    case kCsc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adj_.csc_);
      break;
    }
    case ADJ_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Graph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Graph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Graph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_id_remap_.MergeFrom(from.node_id_remap_);
  attributes_.MergeFrom(from.attributes_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.nodes() != 0) {
    _internal_set_nodes(from._internal_nodes());
  }
  if (from.edges() != 0) {
    _internal_set_edges(from._internal_edges());
  }
  if (from.directed() != 0) {
    _internal_set_directed(from._internal_directed());
  }
  if (from.connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  if (from.unweighted() != 0) {
    _internal_set_unweighted(from._internal_unweighted());
  }
  switch (from.adj_case()) {
    case kDense: {
      _internal_mutable_dense()->::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMatFloat::MergeFrom(from._internal_dense());
      break;
    }
    case kCoo: {
      _internal_mutable_coo()->::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMatFloat::MergeFrom(from._internal_coo());
      break;
    }
    case kCsr: {
      _internal_mutable_csr()->::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMatFloat::MergeFrom(from._internal_csr());
      break;
    }
    case kCsc: {
      _internal_mutable_csc()->::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMatFloat::MergeFrom(from._internal_csc());
      break;
    }
    case ADJ_NOT_SET: {
      break;
    }
  }
}

void Graph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.hitnslab.dnssecurity.deeparcher.api.proto.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_remap_.InternalSwap(&other->node_id_remap_);
  attributes_.InternalSwap(&other->attributes_);
  swap(id_, other->id_);
  swap(nodes_, other->nodes_);
  swap(edges_, other->edges_);
  swap(directed_, other->directed_);
  swap(connected_, other->connected_);
  swap(unweighted_, other->unweighted_);
  swap(adj_, other->adj_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph* Arena::CreateMaybeMessage< ::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::hitnslab::dnssecurity::deeparcher::api::proto::Graph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
