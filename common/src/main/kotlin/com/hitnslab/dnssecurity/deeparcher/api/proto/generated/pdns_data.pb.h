// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/hitnslab/dnssecurity/deeparcher/api/proto/pdns_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fpdns_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fpdns_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fpdns_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fpdns_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fpdns_5fdata_2eproto;
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {
class PDnsData;
class PDnsDataDefaultTypeInternal;
extern PDnsDataDefaultTypeInternal _PDnsData_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::PDnsData* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::PDnsData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {

// ===================================================================

class PDnsData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData) */ {
 public:
  PDnsData();
  virtual ~PDnsData();

  PDnsData(const PDnsData& from);
  PDnsData(PDnsData&& from) noexcept
    : PDnsData() {
    *this = ::std::move(from);
  }

  inline PDnsData& operator=(const PDnsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDnsData& operator=(PDnsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDnsData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDnsData* internal_default_instance() {
    return reinterpret_cast<const PDnsData*>(
               &_PDnsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PDnsData& a, PDnsData& b) {
    a.Swap(&b);
  }
  inline void Swap(PDnsData* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDnsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDnsData* New() const final {
    return CreateMaybeMessage<PDnsData>(nullptr);
  }

  PDnsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDnsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDnsData& from);
  void MergeFrom(const PDnsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDnsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData";
  }
  protected:
  explicit PDnsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fpdns_5fdata_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fpdns_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRCnamesFieldNumber = 9,
    kFqdnFieldNumber = 1,
    kDomainFieldNumber = 2,
    kClientIpFieldNumber = 3,
    kRIpv4AddrsFieldNumber = 7,
    kRIpv6AddrsFieldNumber = 8,
    kQTimeFieldNumber = 4,
    kQTypeFieldNumber = 5,
    kRCodeFieldNumber = 6,
  };
  // repeated string r_cnames = 9;
  int r_cnames_size() const;
  private:
  int _internal_r_cnames_size() const;
  public:
  void clear_r_cnames();
  const std::string& r_cnames(int index) const;
  std::string* mutable_r_cnames(int index);
  void set_r_cnames(int index, const std::string& value);
  void set_r_cnames(int index, std::string&& value);
  void set_r_cnames(int index, const char* value);
  void set_r_cnames(int index, const char* value, size_t size);
  std::string* add_r_cnames();
  void add_r_cnames(const std::string& value);
  void add_r_cnames(std::string&& value);
  void add_r_cnames(const char* value);
  void add_r_cnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& r_cnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_r_cnames();
  private:
  const std::string& _internal_r_cnames(int index) const;
  std::string* _internal_add_r_cnames();
  public:

  // string fqdn = 1;
  void clear_fqdn();
  const std::string& fqdn() const;
  void set_fqdn(const std::string& value);
  void set_fqdn(std::string&& value);
  void set_fqdn(const char* value);
  void set_fqdn(const char* value, size_t size);
  std::string* mutable_fqdn();
  std::string* release_fqdn();
  void set_allocated_fqdn(std::string* fqdn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fqdn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fqdn(
      std::string* fqdn);
  private:
  const std::string& _internal_fqdn() const;
  void _internal_set_fqdn(const std::string& value);
  std::string* _internal_mutable_fqdn();
  public:

  // string domain = 2;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_domain();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_domain(
      std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // bytes client_ip = 3;
  void clear_client_ip();
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const void* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_ip(
      std::string* client_ip);
  private:
  const std::string& _internal_client_ip() const;
  void _internal_set_client_ip(const std::string& value);
  std::string* _internal_mutable_client_ip();
  public:

  // bytes r_ipv4_addrs = 7;
  void clear_r_ipv4_addrs();
  const std::string& r_ipv4_addrs() const;
  void set_r_ipv4_addrs(const std::string& value);
  void set_r_ipv4_addrs(std::string&& value);
  void set_r_ipv4_addrs(const char* value);
  void set_r_ipv4_addrs(const void* value, size_t size);
  std::string* mutable_r_ipv4_addrs();
  std::string* release_r_ipv4_addrs();
  void set_allocated_r_ipv4_addrs(std::string* r_ipv4_addrs);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_r_ipv4_addrs();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_r_ipv4_addrs(
      std::string* r_ipv4_addrs);
  private:
  const std::string& _internal_r_ipv4_addrs() const;
  void _internal_set_r_ipv4_addrs(const std::string& value);
  std::string* _internal_mutable_r_ipv4_addrs();
  public:

  // bytes r_ipv6_addrs = 8;
  void clear_r_ipv6_addrs();
  const std::string& r_ipv6_addrs() const;
  void set_r_ipv6_addrs(const std::string& value);
  void set_r_ipv6_addrs(std::string&& value);
  void set_r_ipv6_addrs(const char* value);
  void set_r_ipv6_addrs(const void* value, size_t size);
  std::string* mutable_r_ipv6_addrs();
  std::string* release_r_ipv6_addrs();
  void set_allocated_r_ipv6_addrs(std::string* r_ipv6_addrs);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_r_ipv6_addrs();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_r_ipv6_addrs(
      std::string* r_ipv6_addrs);
  private:
  const std::string& _internal_r_ipv6_addrs() const;
  void _internal_set_r_ipv6_addrs(const std::string& value);
  std::string* _internal_mutable_r_ipv6_addrs();
  public:

  // int64 q_time = 4;
  void clear_q_time();
  ::PROTOBUF_NAMESPACE_ID::int64 q_time() const;
  void set_q_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_q_time() const;
  void _internal_set_q_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 q_type = 5;
  void clear_q_type();
  ::PROTOBUF_NAMESPACE_ID::int32 q_type() const;
  void set_q_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_q_type() const;
  void _internal_set_q_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 r_code = 6;
  void clear_r_code();
  ::PROTOBUF_NAMESPACE_ID::int32 r_code() const;
  void set_r_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r_code() const;
  void _internal_set_r_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> r_cnames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fqdn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_ipv4_addrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_ipv6_addrs_;
  ::PROTOBUF_NAMESPACE_ID::int64 q_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 q_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fpdns_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PDnsData

// string fqdn = 1;
inline void PDnsData::clear_fqdn() {
  fqdn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& PDnsData::fqdn() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.fqdn)
  return _internal_fqdn();
}
inline void PDnsData::set_fqdn(const std::string& value) {
  _internal_set_fqdn(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.fqdn)
}
inline std::string* PDnsData::mutable_fqdn() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.fqdn)
  return _internal_mutable_fqdn();
}
inline const std::string& PDnsData::_internal_fqdn() const {
  return fqdn_.Get();
}
inline void PDnsData::_internal_set_fqdn(const std::string& value) {
  
  fqdn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void PDnsData::set_fqdn(std::string&& value) {
  
  fqdn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.fqdn)
}
inline void PDnsData::set_fqdn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fqdn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.fqdn)
}
inline void PDnsData::set_fqdn(const char* value,
    size_t size) {
  
  fqdn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.fqdn)
}
inline std::string* PDnsData::_internal_mutable_fqdn() {
  
  return fqdn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* PDnsData::release_fqdn() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.fqdn)
  
  return fqdn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PDnsData::set_allocated_fqdn(std::string* fqdn) {
  if (fqdn != nullptr) {
    
  } else {
    
  }
  fqdn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fqdn,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.fqdn)
}
inline std::string* PDnsData::unsafe_arena_release_fqdn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.fqdn)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return fqdn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PDnsData::unsafe_arena_set_allocated_fqdn(
    std::string* fqdn) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (fqdn != nullptr) {
    
  } else {
    
  }
  fqdn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fqdn, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.fqdn)
}

// string domain = 2;
inline void PDnsData::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& PDnsData::domain() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.domain)
  return _internal_domain();
}
inline void PDnsData::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.domain)
}
inline std::string* PDnsData::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.domain)
  return _internal_mutable_domain();
}
inline const std::string& PDnsData::_internal_domain() const {
  return domain_.Get();
}
inline void PDnsData::_internal_set_domain(const std::string& value) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void PDnsData::set_domain(std::string&& value) {
  
  domain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.domain)
}
inline void PDnsData::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.domain)
}
inline void PDnsData::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.domain)
}
inline std::string* PDnsData::_internal_mutable_domain() {
  
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* PDnsData::release_domain() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.domain)
  
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PDnsData::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.domain)
}
inline std::string* PDnsData::unsafe_arena_release_domain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.domain)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return domain_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PDnsData::unsafe_arena_set_allocated_domain(
    std::string* domain) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      domain, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.domain)
}

// bytes client_ip = 3;
inline void PDnsData::clear_client_ip() {
  client_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& PDnsData::client_ip() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.client_ip)
  return _internal_client_ip();
}
inline void PDnsData::set_client_ip(const std::string& value) {
  _internal_set_client_ip(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.client_ip)
}
inline std::string* PDnsData::mutable_client_ip() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.client_ip)
  return _internal_mutable_client_ip();
}
inline const std::string& PDnsData::_internal_client_ip() const {
  return client_ip_.Get();
}
inline void PDnsData::_internal_set_client_ip(const std::string& value) {
  
  client_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void PDnsData::set_client_ip(std::string&& value) {
  
  client_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.client_ip)
}
inline void PDnsData::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.client_ip)
}
inline void PDnsData::set_client_ip(const void* value,
    size_t size) {
  
  client_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.client_ip)
}
inline std::string* PDnsData::_internal_mutable_client_ip() {
  
  return client_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* PDnsData::release_client_ip() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.client_ip)
  
  return client_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PDnsData::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.client_ip)
}
inline std::string* PDnsData::unsafe_arena_release_client_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.client_ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return client_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PDnsData::unsafe_arena_set_allocated_client_ip(
    std::string* client_ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.client_ip)
}

// int64 q_time = 4;
inline void PDnsData::clear_q_time() {
  q_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PDnsData::_internal_q_time() const {
  return q_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PDnsData::q_time() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.q_time)
  return _internal_q_time();
}
inline void PDnsData::_internal_set_q_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  q_time_ = value;
}
inline void PDnsData::set_q_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_q_time(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.q_time)
}

// int32 q_type = 5;
inline void PDnsData::clear_q_type() {
  q_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDnsData::_internal_q_type() const {
  return q_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDnsData::q_type() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.q_type)
  return _internal_q_type();
}
inline void PDnsData::_internal_set_q_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  q_type_ = value;
}
inline void PDnsData::set_q_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_q_type(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.q_type)
}

// int32 r_code = 6;
inline void PDnsData::clear_r_code() {
  r_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDnsData::_internal_r_code() const {
  return r_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDnsData::r_code() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_code)
  return _internal_r_code();
}
inline void PDnsData::_internal_set_r_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  r_code_ = value;
}
inline void PDnsData::set_r_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r_code(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_code)
}

// bytes r_ipv4_addrs = 7;
inline void PDnsData::clear_r_ipv4_addrs() {
  r_ipv4_addrs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& PDnsData::r_ipv4_addrs() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv4_addrs)
  return _internal_r_ipv4_addrs();
}
inline void PDnsData::set_r_ipv4_addrs(const std::string& value) {
  _internal_set_r_ipv4_addrs(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv4_addrs)
}
inline std::string* PDnsData::mutable_r_ipv4_addrs() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv4_addrs)
  return _internal_mutable_r_ipv4_addrs();
}
inline const std::string& PDnsData::_internal_r_ipv4_addrs() const {
  return r_ipv4_addrs_.Get();
}
inline void PDnsData::_internal_set_r_ipv4_addrs(const std::string& value) {
  
  r_ipv4_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void PDnsData::set_r_ipv4_addrs(std::string&& value) {
  
  r_ipv4_addrs_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv4_addrs)
}
inline void PDnsData::set_r_ipv4_addrs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_ipv4_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv4_addrs)
}
inline void PDnsData::set_r_ipv4_addrs(const void* value,
    size_t size) {
  
  r_ipv4_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv4_addrs)
}
inline std::string* PDnsData::_internal_mutable_r_ipv4_addrs() {
  
  return r_ipv4_addrs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* PDnsData::release_r_ipv4_addrs() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv4_addrs)
  
  return r_ipv4_addrs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PDnsData::set_allocated_r_ipv4_addrs(std::string* r_ipv4_addrs) {
  if (r_ipv4_addrs != nullptr) {
    
  } else {
    
  }
  r_ipv4_addrs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_ipv4_addrs,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv4_addrs)
}
inline std::string* PDnsData::unsafe_arena_release_r_ipv4_addrs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv4_addrs)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return r_ipv4_addrs_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PDnsData::unsafe_arena_set_allocated_r_ipv4_addrs(
    std::string* r_ipv4_addrs) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (r_ipv4_addrs != nullptr) {
    
  } else {
    
  }
  r_ipv4_addrs_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      r_ipv4_addrs, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv4_addrs)
}

// bytes r_ipv6_addrs = 8;
inline void PDnsData::clear_r_ipv6_addrs() {
  r_ipv6_addrs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& PDnsData::r_ipv6_addrs() const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv6_addrs)
  return _internal_r_ipv6_addrs();
}
inline void PDnsData::set_r_ipv6_addrs(const std::string& value) {
  _internal_set_r_ipv6_addrs(value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv6_addrs)
}
inline std::string* PDnsData::mutable_r_ipv6_addrs() {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv6_addrs)
  return _internal_mutable_r_ipv6_addrs();
}
inline const std::string& PDnsData::_internal_r_ipv6_addrs() const {
  return r_ipv6_addrs_.Get();
}
inline void PDnsData::_internal_set_r_ipv6_addrs(const std::string& value) {
  
  r_ipv6_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void PDnsData::set_r_ipv6_addrs(std::string&& value) {
  
  r_ipv6_addrs_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv6_addrs)
}
inline void PDnsData::set_r_ipv6_addrs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_ipv6_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv6_addrs)
}
inline void PDnsData::set_r_ipv6_addrs(const void* value,
    size_t size) {
  
  r_ipv6_addrs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv6_addrs)
}
inline std::string* PDnsData::_internal_mutable_r_ipv6_addrs() {
  
  return r_ipv6_addrs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* PDnsData::release_r_ipv6_addrs() {
  // @@protoc_insertion_point(field_release:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv6_addrs)
  
  return r_ipv6_addrs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PDnsData::set_allocated_r_ipv6_addrs(std::string* r_ipv6_addrs) {
  if (r_ipv6_addrs != nullptr) {
    
  } else {
    
  }
  r_ipv6_addrs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_ipv6_addrs,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv6_addrs)
}
inline std::string* PDnsData::unsafe_arena_release_r_ipv6_addrs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv6_addrs)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return r_ipv6_addrs_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PDnsData::unsafe_arena_set_allocated_r_ipv6_addrs(
    std::string* r_ipv6_addrs) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (r_ipv6_addrs != nullptr) {
    
  } else {
    
  }
  r_ipv6_addrs_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      r_ipv6_addrs, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_ipv6_addrs)
}

// repeated string r_cnames = 9;
inline int PDnsData::_internal_r_cnames_size() const {
  return r_cnames_.size();
}
inline int PDnsData::r_cnames_size() const {
  return _internal_r_cnames_size();
}
inline void PDnsData::clear_r_cnames() {
  r_cnames_.Clear();
}
inline std::string* PDnsData::add_r_cnames() {
  // @@protoc_insertion_point(field_add_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
  return _internal_add_r_cnames();
}
inline const std::string& PDnsData::_internal_r_cnames(int index) const {
  return r_cnames_.Get(index);
}
inline const std::string& PDnsData::r_cnames(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
  return _internal_r_cnames(index);
}
inline std::string* PDnsData::mutable_r_cnames(int index) {
  // @@protoc_insertion_point(field_mutable:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
  return r_cnames_.Mutable(index);
}
inline void PDnsData::set_r_cnames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
  r_cnames_.Mutable(index)->assign(value);
}
inline void PDnsData::set_r_cnames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
  r_cnames_.Mutable(index)->assign(std::move(value));
}
inline void PDnsData::set_r_cnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  r_cnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
}
inline void PDnsData::set_r_cnames(int index, const char* value, size_t size) {
  r_cnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
}
inline std::string* PDnsData::_internal_add_r_cnames() {
  return r_cnames_.Add();
}
inline void PDnsData::add_r_cnames(const std::string& value) {
  r_cnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
}
inline void PDnsData::add_r_cnames(std::string&& value) {
  r_cnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
}
inline void PDnsData::add_r_cnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  r_cnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
}
inline void PDnsData::add_r_cnames(const char* value, size_t size) {
  r_cnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PDnsData::r_cnames() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
  return r_cnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PDnsData::mutable_r_cnames() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.PDnsData.r_cnames)
  return &r_cnames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fpdns_5fdata_2eproto
