// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/hitnslab/dnssecurity/deeparcher/api/proto/matrix.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {
class CooMat;
class CooMatDefaultTypeInternal;
extern CooMatDefaultTypeInternal _CooMat_default_instance_;
class CscMat;
class CscMatDefaultTypeInternal;
extern CscMatDefaultTypeInternal _CscMat_default_instance_;
class CsrMat;
class CsrMatDefaultTypeInternal;
extern CsrMatDefaultTypeInternal _CsrMat_default_instance_;
class DenseMat;
class DenseMatDefaultTypeInternal;
extern DenseMatDefaultTypeInternal _DenseMat_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::CooMat>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::CscMat>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::CsrMat>(Arena*);
template<> ::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat* Arena::CreateMaybeMessage<::com::hitnslab::dnssecurity::deeparcher::api::proto::DenseMat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace hitnslab {
namespace dnssecurity {
namespace deeparcher {
namespace api {
namespace proto {

// ===================================================================

class DenseMat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat) */ {
 public:
  DenseMat();
  virtual ~DenseMat();

  DenseMat(const DenseMat& from);
  DenseMat(DenseMat&& from) noexcept
    : DenseMat() {
    *this = ::std::move(from);
  }

  inline DenseMat& operator=(const DenseMat& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenseMat& operator=(DenseMat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DenseMat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseMat* internal_default_instance() {
    return reinterpret_cast<const DenseMat*>(
               &_DenseMat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DenseMat& a, DenseMat& b) {
    a.Swap(&b);
  }
  inline void Swap(DenseMat* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DenseMat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DenseMat* New() const final {
    return CreateMaybeMessage<DenseMat>(nullptr);
  }

  DenseMat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DenseMat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DenseMat& from);
  void MergeFrom(const DenseMat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenseMat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat";
  }
  protected:
  explicit DenseMat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated float values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class CooMat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat) */ {
 public:
  CooMat();
  virtual ~CooMat();

  CooMat(const CooMat& from);
  CooMat(CooMat&& from) noexcept
    : CooMat() {
    *this = ::std::move(from);
  }

  inline CooMat& operator=(const CooMat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CooMat& operator=(CooMat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CooMat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CooMat* internal_default_instance() {
    return reinterpret_cast<const CooMat*>(
               &_CooMat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CooMat& a, CooMat& b) {
    a.Swap(&b);
  }
  inline void Swap(CooMat* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CooMat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CooMat* New() const final {
    return CreateMaybeMessage<CooMat>(nullptr);
  }

  CooMat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CooMat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CooMat& from);
  void MergeFrom(const CooMat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CooMat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat";
  }
  protected:
  explicit CooMat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kRowsFieldNumber = 2,
    kColsFieldNumber = 3,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated uint64 rows = 2;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rows(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_rows() const;
  void _internal_add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_rows();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 rows(int index) const;
  void set_rows(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      rows() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_rows();

  // repeated uint64 cols = 3;
  int cols_size() const;
  private:
  int _internal_cols_size() const;
  public:
  void clear_cols();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cols(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_cols() const;
  void _internal_add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_cols();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 cols(int index) const;
  void set_cols(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      cols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_cols();

  // repeated float values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > rows_;
  mutable std::atomic<int> _rows_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > cols_;
  mutable std::atomic<int> _cols_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class CsrMat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat) */ {
 public:
  CsrMat();
  virtual ~CsrMat();

  CsrMat(const CsrMat& from);
  CsrMat(CsrMat&& from) noexcept
    : CsrMat() {
    *this = ::std::move(from);
  }

  inline CsrMat& operator=(const CsrMat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsrMat& operator=(CsrMat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CsrMat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsrMat* internal_default_instance() {
    return reinterpret_cast<const CsrMat*>(
               &_CsrMat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CsrMat& a, CsrMat& b) {
    a.Swap(&b);
  }
  inline void Swap(CsrMat* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsrMat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsrMat* New() const final {
    return CreateMaybeMessage<CsrMat>(nullptr);
  }

  CsrMat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsrMat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsrMat& from);
  void MergeFrom(const CsrMat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsrMat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat";
  }
  protected:
  explicit CsrMat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kRowOffsetsFieldNumber = 2,
    kColIndicesFieldNumber = 3,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated uint64 row_offsets = 2;
  int row_offsets_size() const;
  private:
  int _internal_row_offsets_size() const;
  public:
  void clear_row_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_row_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_row_offsets() const;
  void _internal_add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_row_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 row_offsets(int index) const;
  void set_row_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      row_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_row_offsets();

  // repeated uint64 col_indices = 3;
  int col_indices_size() const;
  private:
  int _internal_col_indices_size() const;
  public:
  void clear_col_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_col_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_col_indices() const;
  void _internal_add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_col_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 col_indices(int index) const;
  void set_col_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      col_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_col_indices();

  // repeated float values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > row_offsets_;
  mutable std::atomic<int> _row_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > col_indices_;
  mutable std::atomic<int> _col_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class CscMat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat) */ {
 public:
  CscMat();
  virtual ~CscMat();

  CscMat(const CscMat& from);
  CscMat(CscMat&& from) noexcept
    : CscMat() {
    *this = ::std::move(from);
  }

  inline CscMat& operator=(const CscMat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CscMat& operator=(CscMat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CscMat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CscMat* internal_default_instance() {
    return reinterpret_cast<const CscMat*>(
               &_CscMat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CscMat& a, CscMat& b) {
    a.Swap(&b);
  }
  inline void Swap(CscMat* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CscMat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CscMat* New() const final {
    return CreateMaybeMessage<CscMat>(nullptr);
  }

  CscMat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CscMat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CscMat& from);
  void MergeFrom(const CscMat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CscMat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat";
  }
  protected:
  explicit CscMat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto);
    return ::descriptor_table_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kColOffsetsFieldNumber = 2,
    kRowIndicesFieldNumber = 3,
    kValuesFieldNumber = 10,
  };
  // repeated uint64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dims();

  // repeated uint64 col_offsets = 2;
  int col_offsets_size() const;
  private:
  int _internal_col_offsets_size() const;
  public:
  void clear_col_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_col_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_col_offsets() const;
  void _internal_add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_col_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 col_offsets(int index) const;
  void set_col_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      col_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_col_offsets();

  // repeated uint64 row_indices = 3;
  int row_indices_size() const;
  private:
  int _internal_row_indices_size() const;
  public:
  void clear_row_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_row_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_row_indices() const;
  void _internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_row_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 row_indices(int index) const;
  void set_row_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      row_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_row_indices();

  // repeated float values = 10;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > col_offsets_;
  mutable std::atomic<int> _col_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > row_indices_;
  mutable std::atomic<int> _row_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DenseMat

// repeated uint64 dims = 1;
inline int DenseMat::_internal_dims_size() const {
  return dims_.size();
}
inline int DenseMat::dims_size() const {
  return _internal_dims_size();
}
inline void DenseMat::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DenseMat::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DenseMat::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat.dims)
  return _internal_dims(index);
}
inline void DenseMat::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat.dims)
}
inline void DenseMat::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void DenseMat::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
DenseMat::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
DenseMat::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
DenseMat::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
DenseMat::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat.dims)
  return _internal_mutable_dims();
}

// repeated float values = 10;
inline int DenseMat::_internal_values_size() const {
  return values_.size();
}
inline int DenseMat::values_size() const {
  return _internal_values_size();
}
inline void DenseMat::clear_values() {
  values_.Clear();
}
inline float DenseMat::_internal_values(int index) const {
  return values_.Get(index);
}
inline float DenseMat::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat.values)
  return _internal_values(index);
}
inline void DenseMat::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat.values)
}
inline void DenseMat::_internal_add_values(float value) {
  values_.Add(value);
}
inline void DenseMat::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DenseMat::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DenseMat::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DenseMat::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DenseMat::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.DenseMat.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CooMat

// repeated uint64 dims = 1;
inline int CooMat::_internal_dims_size() const {
  return dims_.size();
}
inline int CooMat::dims_size() const {
  return _internal_dims_size();
}
inline void CooMat::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMat::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMat::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.dims)
  return _internal_dims(index);
}
inline void CooMat::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.dims)
}
inline void CooMat::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void CooMat::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMat::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMat::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMat::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMat::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.dims)
  return _internal_mutable_dims();
}

// repeated uint64 rows = 2;
inline int CooMat::_internal_rows_size() const {
  return rows_.size();
}
inline int CooMat::rows_size() const {
  return _internal_rows_size();
}
inline void CooMat::clear_rows() {
  rows_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMat::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMat::rows(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.rows)
  return _internal_rows(index);
}
inline void CooMat::set_rows(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rows_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.rows)
}
inline void CooMat::_internal_add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rows_.Add(value);
}
inline void CooMat::add_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_rows(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.rows)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMat::_internal_rows() const {
  return rows_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMat::rows() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.rows)
  return _internal_rows();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMat::_internal_mutable_rows() {
  return &rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMat::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.rows)
  return _internal_mutable_rows();
}

// repeated uint64 cols = 3;
inline int CooMat::_internal_cols_size() const {
  return cols_.size();
}
inline int CooMat::cols_size() const {
  return _internal_cols_size();
}
inline void CooMat::clear_cols() {
  cols_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMat::_internal_cols(int index) const {
  return cols_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CooMat::cols(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.cols)
  return _internal_cols(index);
}
inline void CooMat::set_cols(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  cols_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.cols)
}
inline void CooMat::_internal_add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  cols_.Add(value);
}
inline void CooMat::add_cols(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_cols(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.cols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMat::_internal_cols() const {
  return cols_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CooMat::cols() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.cols)
  return _internal_cols();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMat::_internal_mutable_cols() {
  return &cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CooMat::mutable_cols() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.cols)
  return _internal_mutable_cols();
}

// repeated float values = 10;
inline int CooMat::_internal_values_size() const {
  return values_.size();
}
inline int CooMat::values_size() const {
  return _internal_values_size();
}
inline void CooMat::clear_values() {
  values_.Clear();
}
inline float CooMat::_internal_values(int index) const {
  return values_.Get(index);
}
inline float CooMat::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.values)
  return _internal_values(index);
}
inline void CooMat::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.values)
}
inline void CooMat::_internal_add_values(float value) {
  values_.Add(value);
}
inline void CooMat::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CooMat::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CooMat::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CooMat::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CooMat::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CooMat.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CsrMat

// repeated uint64 dims = 1;
inline int CsrMat::_internal_dims_size() const {
  return dims_.size();
}
inline int CsrMat::dims_size() const {
  return _internal_dims_size();
}
inline void CsrMat::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMat::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMat::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.dims)
  return _internal_dims(index);
}
inline void CsrMat::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.dims)
}
inline void CsrMat::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void CsrMat::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMat::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMat::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMat::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMat::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.dims)
  return _internal_mutable_dims();
}

// repeated uint64 row_offsets = 2;
inline int CsrMat::_internal_row_offsets_size() const {
  return row_offsets_.size();
}
inline int CsrMat::row_offsets_size() const {
  return _internal_row_offsets_size();
}
inline void CsrMat::clear_row_offsets() {
  row_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMat::_internal_row_offsets(int index) const {
  return row_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMat::row_offsets(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.row_offsets)
  return _internal_row_offsets(index);
}
inline void CsrMat::set_row_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.row_offsets)
}
inline void CsrMat::_internal_add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_offsets_.Add(value);
}
inline void CsrMat::add_row_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_row_offsets(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.row_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMat::_internal_row_offsets() const {
  return row_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMat::row_offsets() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.row_offsets)
  return _internal_row_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMat::_internal_mutable_row_offsets() {
  return &row_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMat::mutable_row_offsets() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.row_offsets)
  return _internal_mutable_row_offsets();
}

// repeated uint64 col_indices = 3;
inline int CsrMat::_internal_col_indices_size() const {
  return col_indices_.size();
}
inline int CsrMat::col_indices_size() const {
  return _internal_col_indices_size();
}
inline void CsrMat::clear_col_indices() {
  col_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMat::_internal_col_indices(int index) const {
  return col_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CsrMat::col_indices(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.col_indices)
  return _internal_col_indices(index);
}
inline void CsrMat::set_col_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.col_indices)
}
inline void CsrMat::_internal_add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_indices_.Add(value);
}
inline void CsrMat::add_col_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_col_indices(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.col_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMat::_internal_col_indices() const {
  return col_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CsrMat::col_indices() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.col_indices)
  return _internal_col_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMat::_internal_mutable_col_indices() {
  return &col_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CsrMat::mutable_col_indices() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.col_indices)
  return _internal_mutable_col_indices();
}

// repeated float values = 10;
inline int CsrMat::_internal_values_size() const {
  return values_.size();
}
inline int CsrMat::values_size() const {
  return _internal_values_size();
}
inline void CsrMat::clear_values() {
  values_.Clear();
}
inline float CsrMat::_internal_values(int index) const {
  return values_.Get(index);
}
inline float CsrMat::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.values)
  return _internal_values(index);
}
inline void CsrMat::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.values)
}
inline void CsrMat::_internal_add_values(float value) {
  values_.Add(value);
}
inline void CsrMat::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CsrMat::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CsrMat::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CsrMat::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CsrMat::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CsrMat.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CscMat

// repeated uint64 dims = 1;
inline int CscMat::_internal_dims_size() const {
  return dims_.size();
}
inline int CscMat::dims_size() const {
  return _internal_dims_size();
}
inline void CscMat::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMat::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMat::dims(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.dims)
  return _internal_dims(index);
}
inline void CscMat::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.dims)
}
inline void CscMat::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dims_.Add(value);
}
inline void CscMat::add_dims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMat::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMat::dims() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMat::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMat::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.dims)
  return _internal_mutable_dims();
}

// repeated uint64 col_offsets = 2;
inline int CscMat::_internal_col_offsets_size() const {
  return col_offsets_.size();
}
inline int CscMat::col_offsets_size() const {
  return _internal_col_offsets_size();
}
inline void CscMat::clear_col_offsets() {
  col_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMat::_internal_col_offsets(int index) const {
  return col_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMat::col_offsets(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.col_offsets)
  return _internal_col_offsets(index);
}
inline void CscMat::set_col_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.col_offsets)
}
inline void CscMat::_internal_add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  col_offsets_.Add(value);
}
inline void CscMat::add_col_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_col_offsets(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.col_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMat::_internal_col_offsets() const {
  return col_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMat::col_offsets() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.col_offsets)
  return _internal_col_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMat::_internal_mutable_col_offsets() {
  return &col_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMat::mutable_col_offsets() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.col_offsets)
  return _internal_mutable_col_offsets();
}

// repeated uint64 row_indices = 3;
inline int CscMat::_internal_row_indices_size() const {
  return row_indices_.size();
}
inline int CscMat::row_indices_size() const {
  return _internal_row_indices_size();
}
inline void CscMat::clear_row_indices() {
  row_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMat::_internal_row_indices(int index) const {
  return row_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CscMat::row_indices(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.row_indices)
  return _internal_row_indices(index);
}
inline void CscMat::set_row_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.row_indices)
}
inline void CscMat::_internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  row_indices_.Add(value);
}
inline void CscMat::add_row_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_row_indices(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.row_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMat::_internal_row_indices() const {
  return row_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CscMat::row_indices() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.row_indices)
  return _internal_row_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMat::_internal_mutable_row_indices() {
  return &row_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CscMat::mutable_row_indices() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.row_indices)
  return _internal_mutable_row_indices();
}

// repeated float values = 10;
inline int CscMat::_internal_values_size() const {
  return values_.size();
}
inline int CscMat::values_size() const {
  return _internal_values_size();
}
inline void CscMat::clear_values() {
  values_.Clear();
}
inline float CscMat::_internal_values(int index) const {
  return values_.Get(index);
}
inline float CscMat::values(int index) const {
  // @@protoc_insertion_point(field_get:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.values)
  return _internal_values(index);
}
inline void CscMat::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.values)
}
inline void CscMat::_internal_add_values(float value) {
  values_.Add(value);
}
inline void CscMat::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CscMat::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CscMat::values() const {
  // @@protoc_insertion_point(field_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CscMat::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CscMat::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:com.hitnslab.dnssecurity.deeparcher.api.proto.CscMat.values)
  return _internal_mutable_values();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace api
}  // namespace deeparcher
}  // namespace dnssecurity
}  // namespace hitnslab
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_2fhitnslab_2fdnssecurity_2fdeeparcher_2fapi_2fproto_2fmatrix_2eproto
